{"version":3,"sources":["core/errors/NotImplementedError.ts","core/context/DocumentTitle/DocumentTitleContext.ts","core/context/Loader/LoaderContext.ts","core/context/Modals/ModalsContext.ts","shared/components/IconsAdapter/IconsAdapter.tsx","core/context/DocumentTitle/index.ts","core/context/DocumentTitle/DocumentTitleContextProvider.tsx","core/context/Loader/index.ts","core/context/Loader/LoaderContextProvider.tsx","core/context/User/index.ts","core/context/User/UserContext.ts","core/context/User/UserContextProvider.tsx","shared/components/Compose/Compose.tsx","shared/components/controls/CheckboxControl/CheckboxControl.tsx","shared/components/controls/CheckboxControl/CheckboxGroupControl.tsx","shared/components/controls/InputControl/InputPasswordControl.tsx","shared/components/controls/InputControl/InputControl.tsx","shared/components/controls/InputControl/InputNumberControl.tsx","shared/components/controls/MultiSelectControl/MultiSelectControl.tsx","shared/components/controls/RadioControl/RadioControl.tsx","shared/components/controls/RadioControl/RadioButtonControl.tsx","shared/components/controls/RadioControl/RadioLevelControl.tsx","shared/components/controls/TextAreaControl/TextAreaControl.tsx","shared/components/controls/SelectControl/SelectControl.tsx","shared/components/controls/DatePickerControl/consts.ts","shared/components/controls/DatePickerControl/DatePickerControl.tsx","shared/components/controls/TreeSelectControl/TreeSelectControl.tsx","shared/components/controls/RangePickerControl/consts.ts","shared/components/controls/SwitchControl/SwitchControl.tsx","shared/components/controls/ControlGroup/ControlGroup.tsx","shared/components/controls/RangePickerControl/RangePickerControl.tsx","shared/components/controls/UploadDraggerImageControl/UploadDraggerImageControl.tsx","shared/components/ButtonsToolbar/ButtonsToolbar.tsx","core/context/Modals/index.ts","core/context/Modals/ModalsContextProvider.tsx","core/context/index.ts","shared/consts/layout.consts.ts","shared/consts/messages.consts.ts","shared/consts/forms.consts.ts","shared/popups/Popups.tsx","shared/popups/AuthModal/AuthModal.tsx","shared/popups/PopupAdapter.tsx","App.tsx","index.tsx","shared/utils/form.utils.tsx","shared/utils/common.utils.ts","core/components/Header/components/MainMenu/MainMenu.consts.ts","core/components/Header/components/MainMenu/MainMenu.tsx","core/components/Header/Header.tsx","core/components/Footer/Footer.tsx","core/components/PageContent/PageContent.tsx","core/components/ContentTitle/ContentTitle.tsx","routing/routeNames.const.ts","pages/Main/MainPage.tsx","pages/NotFound/NotFoundPage.tsx","pages/Profile/ProfilePage.tsx","pages/Categories/Categories.const.ts","pages/Categories/Categories.utils.tsx","shared/forms/ConfirmDeleteForm/ConfirmDeleteForm.tsx","mocks/CategoriesMock.ts","pages/Categories/components/CategoriesForm/CategoriesForm.tsx","pages/Categories/Categories.tsx","pages/Questions/Questions.const.ts","pages/Questions/Questions.utils.tsx","pages/Questions/components/QuestionsForm/QuestionsForm.tsx","pages/Questions/components/QuestionsFilters/QuestionsFilters.tsx","pages/Questions/Questions.tsx","pages/Subcategories/Subcategories.const.ts","pages/Subcategories/Subcategories.utils.tsx","pages/Subcategories/components/SubcategoriesForm/SubcategoriesForm.tsx","pages/Subcategories/Subcategories.tsx","routing/Routing.tsx","shared/components/controls/MultiSelectControl/MultiSelectControlProps.model.ts"],"names":["NotImplementedError","Error","DocumentTitleContext","React","createContext","updateTitle","newTitle","LoaderContext","loaderState","setLoaderState","state","ModalsContext","IconsAdapter","memo","iconType","restProps","iconsLibrary","ArrowLeftOutlined","CheckOutlined","CloseOutlined","CopyOutlined","DeleteOutlined","DownOutlined","EditOutlined","FileAddOutlined","FilterOutlined","HomeOutlined","LogoutOutlined","MenuFoldOutlined","MenuOutlined","MenuUnfoldOutlined","MinusOutlined","PlusCircleOutlined","PlusOutlined","SearchOutlined","SettingOutlined","UserOutlined","RightOutlined","LikeOutlined","LockOutlined","FolderAddOutlined","LinkOutlined","CloseCircleOutlined","BankOutlined","DislikeOutlined","PictureOutlined","EyeOutlined","DocumentTitleContextProvider","children","document","title","useCallback","Provider","value","LoaderContextProvider","useState","spin","useMemo","className","size","UserContext","userData","setUserData","UserContextProvider","useContext","history","useHistory","onSetUserData","localStorage","setItem","JSON","stringify","push","ROUTE_NAMES","PROFILE","checkAuth","user","getItem","parse","e","console","log","useEffect","Compose","props","components","reduceRight","acc","Comp","CheckboxControl","Group","InputPasswordControl","Password","InputControl","placeholder","INPUT_PLACEHOLDER_DEFAULT","classes","calculateClass","fullWidth","INPUT_NUMBER_PLACEHOLDER_DEFAULT","MultiSelectControl","onChange","treeData","tagsType","selectAll","addonAfter","additionalProps","getTagLabel","find","searchLabel","el","handleSelectAllChange","length","map","Number","filter","Boolean","handleDeselectOption","id","tagsCloud","key","onClick","renderTagsListDeleteBtn","type","icon","tagsList","tagsListView","href","QUESTIONNAIRE_TEMPLATES_EDIT","target","rel","renderMenuItemSelectAll","getTreeData","disableCheckbox","disabled","selectClasses","defaultValue","dropdownClassName","treeNodeFilterProp","showArrow","SELECT_SEARCH_PLACEHOLDER_DEFAULT","treeCheckable","showCheckedStrategy","TagsType","Cloud","List","ListView","values","String","label","dependencies","form","valueState","setValueState","triggerChanges","handleRadioGroupChange","event","startTrigger","Button","labelCol","xs","valueCol","rowOptions","renderLevel","count","Array","fill","_","i","radios","style","width","reverse","gutter","align","TextAreaControl","dropdownClasses","handleSelectChange","number","SELECT_PLACEHOLDER_DEFAULT","options","TextArea","dateFormatList","date","setDate","triggerChange","resultDate","formatDate","handleDateChange","format","moment","undefined","join","RangePicker","DatePicker","imageUrl","setImageUrl","handleChange","info","reader","FileReader","addEventListener","result","readAsDataURL","file","originFileObj","beforeUploadBanner","isJpgOrPng","message","warning","Dragger","accept","showUploadList","beforeUpload","src","alt","UPLOAD_IMAGE_PLACEHOLDER_DEFAULT","ButtonsToolbar","noMargin","justifyContent","ModalsContextProvider","popupAdapterOptions","setPopupAdapterOptions","LABEL_COL_FULL","TABLE_EMPTY_MESSAGE","Popups","AuthModal","onRequestFinish","handleFinish","initialValues","login","password","onFinish","Item","name","prefix","valuePropName","htmlType","PopupAdapter","Component","component","buttonText","formId","modalOptions","formOptions","buttonOption","havePopup","haveButton","recordCopy","deleteFormAction","rowSelectionType","getRestPopupAdapterOptions","prevState","okText","closeModal","visible","showModal","handleRequestFinish","handleCancel","okButtonProps","onCancel","destroyOnClose","onCancelSubmit","App","locale","ru_RU","BrowserRouter","ReactDOM","render","getElementById","normalizeDataForTreeSelect","units","renderQuestionnairesDropdown","url","menu","MAIN_MENU_ITEMS","link","CATEGORIES","SUBCATEGORIES","QUESTIONS","MainMenu","menuRender","menuItem","to","Header","popupHandler","MAIN","preventDefault","removeItem","footer","Footer","PageContent","ContentTitle","STATISTIC","NotFoundPage","ProfilePage","CATEGORIES_TABLE_COLUMNS","dataIndex","tableRow","ConfirmDeleteForm","a","hidden","CATEGORIES_MOCK","root_categories","child","categories","parent","question","popular","questions","answer","long_answer","doc","CategoriesForm","dictionary","setDictionary","body","err","dictionaryFetch","labelAlign","showSearch","allowClear","dropdownRender","notFoundContent","Categories","handleDelete","rowKey","emptyText","columns","dataSource","QUESTIONS_TABLE_COLUMNS","isPopular","QuestionsForm","autoSize","minRows","maxRows","Questions","SUBCATEGORIES_TABLE_COLUMNS","SubcategoriesForm","subcategories","Subcategories","Routing","contentStyles","path","exact"],"mappings":"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","file":"static/js/main.4daa0e78.chunk.js","sourcesContent":["export class NotImplementedError extends Error {\n    constructor() {\n        super('Method Not Implemented')\n    }\n}\n","import React from 'react'\nimport { NotImplementedError } from 'core/errors'\n\nimport { DocumentTitleContextProps } from './DocumentTitleContextProps'\n\nexport const DocumentTitleContext = React.createContext<\n    DocumentTitleContextProps\n>({\n    updateTitle: (newTitle) => {\n        throw new NotImplementedError()\n    },\n})\n","import React from 'react'\n\nimport { LoaderContextProps } from './LoaderContextProps'\nimport { NotImplementedError } from '../../errors'\n\nexport const LoaderContext = React.createContext<LoaderContextProps>({\n    loaderState: false,\n    setLoaderState: (state) => {\n        throw new NotImplementedError()\n    },\n})\n","import React from 'react'\r\n\r\nimport { ModalsContextProps } from './ModalsContextProps'\r\n\r\nexport const ModalsContext = React.createContext<ModalsContextProps>(\r\n    {} as ModalsContextProps\r\n)\r\n","import React from 'react'\nimport {\n    ArrowLeftOutlined,\n    CheckOutlined,\n    CloseOutlined,\n    CopyOutlined,\n    DeleteOutlined,\n    DownOutlined,\n    EditOutlined,\n    FileAddOutlined,\n    FilterOutlined,\n    HomeOutlined,\n    LogoutOutlined,\n    MenuFoldOutlined,\n    MenuOutlined,\n    MenuUnfoldOutlined,\n    MinusOutlined,\n    PlusCircleOutlined,\n    PlusOutlined,\n    SearchOutlined,\n    SettingOutlined,\n    UserOutlined,\n    RightOutlined,\n    LikeOutlined,\n    LockOutlined,\n    FolderAddOutlined,\n    LinkOutlined,\n    CloseCircleOutlined,\n    BankOutlined,\n    DislikeOutlined,\n    PictureOutlined,\n    EyeOutlined\n} from '@ant-design/icons'\n\nimport { IconsAdapterProps } from './IconsAdapter.model'\n\n/**\n * Адаптер для `Icons` от `antd`, принимает все теже `props`.\n * iconType влияет на тип выводимой иконки.\n */\n\nexport const IconsAdapter: React.FC<IconsAdapterProps> = React.memo(\n    ({ iconType, ...restProps }) => {\n        const iconsLibrary = {\n            ArrowLeftOutlined: <ArrowLeftOutlined {...restProps} />,\n            CheckOutlined: <CheckOutlined {...restProps} />,\n            CloseOutlined: <CloseOutlined {...restProps} />,\n            CopyOutlined: <CopyOutlined {...restProps} />,\n            DeleteOutlined: <DeleteOutlined {...restProps} />,\n            DownOutlined: <DownOutlined {...restProps} />,\n            EditOutlined: <EditOutlined {...restProps} />,\n            FileAddOutlined: <FileAddOutlined {...restProps} />,\n            FilterOutlined: <FilterOutlined {...restProps} />,\n            HomeOutlined: <HomeOutlined {...restProps} />,\n            LogoutOutlined: <LogoutOutlined {...restProps} />,\n            MenuFoldOutlined: <MenuFoldOutlined {...restProps} />,\n            MenuOutlined: <MenuOutlined {...restProps} />,\n            MenuUnfoldOutlined: <MenuUnfoldOutlined {...restProps} />,\n            MinusOutlined: <MinusOutlined {...restProps} />,\n            PlusCircleOutlined: <PlusCircleOutlined {...restProps} />,\n            PlusOutlined: <PlusOutlined {...restProps} />,\n            SearchOutlined: <SearchOutlined {...restProps} />,\n            SettingOutlined: <SettingOutlined {...restProps} />,\n            UserOutlined: <UserOutlined {...restProps} />,\n            RightOutlined: <RightOutlined {...restProps} />,\n            LikeOutlined: <LikeOutlined {...restProps} />,\n            LockOutlined: <LockOutlined {...restProps} />,\n            FolderAddOutlined: <FolderAddOutlined {...restProps} />,\n            LinkOutlined: <LinkOutlined {...restProps} />,\n            CloseCircleOutlined: <CloseCircleOutlined {...restProps} />,\n            BankOutlined: <BankOutlined {...restProps} />,\n            DislikeOutlined: <DislikeOutlined {...restProps} />,\n            PictureOutlined: <PictureOutlined {...restProps} />,\n            EyeOutlined: <EyeOutlined {...restProps} />,\n        }\n\n        return <>{iconType ? iconsLibrary[iconType] : ''}</>\n    }\n)\n","export * from './DocumentTitleContext'\nexport * from './DocumentTitleContextProps'\nexport * from './DocumentTitleContextProvider'\n","import React, { FC, useCallback } from 'react'\n\nimport { DocumentTitleContext } from './DocumentTitleContext'\n\nexport const DocumentTitleContextProvider: FC = React.memo(({ children }) => {\n    document.title = 'Система взаимодействия с гражданами'\n\n    const updateTitle = useCallback(\n        (newTitle: string) => (document.title = newTitle),\n        []\n    )\n\n    return (\n        <DocumentTitleContext.Provider value={{ updateTitle }}>\n            {children}\n        </DocumentTitleContext.Provider>\n    )\n})\n","export * from './LoaderContext'\nexport * from './LoaderContextProps'\nexport * from './LoaderContextProvider'\n","import './LoaderContextProvider.scss'\n\nimport React, { FC, useMemo, useState } from 'react'\nimport { Spin } from 'antd'\n\nimport { LoaderContext } from './LoaderContext'\n\nexport const LoaderContextProvider: FC = React.memo(({ children }) => {\n    const [loaderState, setLoaderState] = useState<boolean>(false)\n    const spin = useMemo(\n        () => loaderState && <Spin className=\"glb-loader\" size=\"large\" />,\n        [loaderState]\n    )\n\n    return (\n        <LoaderContext.Provider value={{ loaderState, setLoaderState }}>\n            {spin}\n            {children}\n        </LoaderContext.Provider>\n    )\n})\n","export * from './UserContext'\nexport * from './UserContextProps'\nexport * from './UserContextProvider'\n","import React from 'react'\nimport { NotImplementedError } from 'core/errors'\n\nimport { UserContextProps } from './UserContextProps'\n\nexport const UserContext = React.createContext<UserContextProps>({\n    userData: null,\n    setUserData: (userData) => {\n        throw new NotImplementedError()\n    },\n})\n","import React, { FC, useCallback, useContext, useEffect, useState } from 'react'\n\nimport { LoaderContext, UserContext } from 'core/context'\nimport { Store } from 'rc-field-form/lib/interface'\nimport { ROUTE_NAMES } from 'routing'\nimport { useHistory } from 'react-router-dom'\n\nexport const UserContextProvider: FC = React.memo(({ children }) => {\n    const { setLoaderState } = useContext(LoaderContext)\n    const [userData, setUserData] = useState<Store | null>(null)\n    const history = useHistory()\n\n    const onSetUserData = useCallback(\n        (userData: Store | null) => {\n            setUserData(userData)\n            localStorage.setItem('userData', JSON.stringify(userData))\n            history.push(ROUTE_NAMES.PROFILE)\n        },\n        [setUserData, history]\n    )\n\n    const checkAuth = useCallback(() => {\n        if (userData) {\n            return\n        }\n\n        try {\n            setLoaderState(true)\n            const user = localStorage.getItem('userData')\n            setUserData(user ? JSON.parse(user) : null)\n        } catch (e) {\n            console.log(e)\n        } finally {\n            setLoaderState(false)\n        }\n    }, [userData, setLoaderState, setUserData])\n\n    useEffect(() => {\n        checkAuth()\n    }, [checkAuth])\n\n    return (\n        <UserContext.Provider value={{ userData, setUserData: onSetUserData }}>\n            {children}\n        </UserContext.Provider>\n    )\n})\n","import React from 'react'\r\n\r\nimport { ComposeProps } from './ComposeProps'\r\n\r\nexport const Compose = React.memo((props: ComposeProps) => {\r\n    const { components = [], children } = props\r\n\r\n    return (\r\n        <>\r\n            {components.reduceRight((acc, Comp) => {\r\n                return <Comp>{acc}</Comp>\r\n            }, children)}\r\n        </>\r\n    )\r\n})\r\n","import './CheckboxControl.scss'\r\n\r\nimport React from 'react'\r\nimport { Checkbox } from 'antd'\r\n\r\nimport { CheckboxControlProps } from './CheckboxControlProps.model'\r\n\r\n/**\r\n * Декоратор для `Checkbox` от `antd`, принимает все теже `props`\r\n */\r\nexport const CheckboxControl: React.FC<CheckboxControlProps> = React.memo(\r\n    (props) => {\r\n        return (\r\n            <div className=\"form-control checkbox-control\">\r\n                <Checkbox {...props}>{props.children}</Checkbox>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import './CheckboxControl.scss'\r\n\r\nimport React from 'react'\r\nimport { Checkbox } from 'antd'\r\n\r\nimport { CheckboxGroupControlProps } from './CheckboxControlProps.model'\r\n\r\n/**\r\n * Декоратор для `Checkbox.Group` от `antd`, принимает все теже `props`\r\n */\r\nexport const CheckboxGroupControl: React.FC<CheckboxGroupControlProps> = React.memo(\r\n    (props) => {\r\n        return (\r\n            <div className=\"checkbox-group-control\">\r\n                <Checkbox.Group {...props} />\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import './InputControl.scss'\r\n\r\nimport React from 'react'\r\nimport { Input } from 'antd'\r\n\r\nimport { InputPasswordControlProps } from './InputControlProps.model'\r\n\r\n/**\r\n * Декоратор для `Input.Password` от `antd`, принимает все теже `props`\r\n */\r\nexport const InputPasswordControl: React.FC<InputPasswordControlProps> = React.memo(\r\n    (props) => {\r\n        return (\r\n            <div className=\"input-password-control\">\r\n                <Input.Password {...props} />\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import './InputControl.scss'\n\nimport React from 'react'\nimport { INPUT_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { Input } from 'antd'\n\nimport { InputControlProps } from './InputControlProps.model'\n\n/**\n * Декоратор для `Input` от `antd`, принимает все теже `props`\n */\nexport const InputControl: React.FC<InputControlProps> = React.memo((props) => {\n    return (\n        <div className=\"form-control input-control\">\n            <Input placeholder={INPUT_PLACEHOLDER_DEFAULT} {...props} />\n        </div>\n    )\n})\n","import './InputNumberControl.scss'\n\nimport React, { useMemo } from 'react'\nimport { INPUT_NUMBER_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { InputNumber } from 'antd'\nimport { calculateClass } from 'shared/utils'\n\nimport { InputNumberControlProps } from './InputControlProps.model'\n\n/**\n * Декоратор для `InputNumber` от `antd`, принимает все теже `props`\n */\nexport const InputNumberControl: React.FC<InputNumberControlProps> = React.memo(\n    (props) => {\n        const classes = useMemo(\n            () =>\n                calculateClass([\n                    'form-control',\n                    'input-number-control',\n                    props.fullWidth ? 'input-number-control_full-width' : '',\n                ]),\n            [props.fullWidth]\n        )\n\n        return (\n            <div className={classes}>\n                <InputNumber\n                    placeholder={INPUT_NUMBER_PLACEHOLDER_DEFAULT}\n                    {...props}\n                />\n            </div>\n        )\n    }\n)\n","import './MultiSelectControl.sass'\n\nimport React, { useCallback, useMemo } from 'react'\nimport { Button, TreeSelect } from 'antd'\nimport { DataNode } from 'rc-tree-select/lib/interface.d'\nimport { IconsAdapter } from 'shared/components'\nimport { ROUTE_NAMES } from 'routing'\nimport { SELECT_SEARCH_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { calculateClass } from 'shared/utils'\n\nimport {\n    MultiSelectControlProps,\n    TagsType,\n} from './MultiSelectControlProps.model'\n\n/**\n * Декоратор для `TreeSelect` от `antd`\n * Использовать в случае, если нужен множественный выбор.\n */\nexport const MultiSelectControl: React.FC<MultiSelectControlProps<\n    number[]\n    >> = React.memo((props) => {\n    const {\n        onChange,\n        value,\n        treeData = [],\n        tagsType,\n        placeholder,\n        selectAll,\n        addonAfter,\n        ...additionalProps\n    } = props\n\n    /**\n     * Функция возвращает label\n     * @param value - значение по которому необходимо найти label\n     */\n    const getTagLabel = useCallback(\n        (value: number) => {\n            const searchLabel = (el: DataNode): unknown =>\n                el.value === value || el.children?.find(searchLabel)\n\n            return treeData?.find(searchLabel)?.title\n        },\n        [treeData]\n    )\n\n    /**\n     * Обработчик пункта \"Выбрать все/снять выделение\" в TreeSelect\n     */\n    const handleSelectAllChange = useCallback(() => {\n        if (onChange) {\n            value?.length\n                ? onChange([])\n                : onChange(\n                treeData?.map((el) => Number(el.value)).filter(Boolean)\n                )\n        }\n    }, [value, treeData, onChange])\n\n    /**\n     * Обработчик для удаления выбранного пункта меню\n     * @param id - id удаляемого пункта меню\n     */\n    const handleDeselectOption = useCallback(\n        (id: number) => {\n            if (onChange && value) {\n                onChange(value.filter((el) => el !== id))\n            }\n        },\n        [value, onChange]\n    )\n\n    /**\n     * Рендер списка выбранных пунктов меню для типа \"Cloud\"\n     */\n    const tagsCloud = useMemo(() => {\n        return value?.map((el: number) => (\n            <span\n                className=\"multi-select-tags__item\"\n                key={el}\n                onClick={() => handleDeselectOption(el)}\n            >\n                <span>{getTagLabel(el)}</span>\n                <i />\n            </span>\n        ))\n    }, [getTagLabel, handleDeselectOption, value])\n\n    /**\n     * Кнопка удаление выбранного пункта из списка\n     * @param id - номер пункта\n     */\n    const renderTagsListDeleteBtn = useCallback(\n        (id: number) => (\n            <Button\n                type=\"link\"\n                icon={\n                    <IconsAdapter\n                        iconType=\"CloseOutlined\"\n                        className=\"multi-select-list__btn-deselect\"\n                    />\n                }\n                onClick={() => handleDeselectOption(id)}\n            />\n        ),\n        [handleDeselectOption]\n    )\n\n    /**\n     * Рендер списка выбранных пунктов меню для типа \"List\"\n     */\n    const tagsList = useMemo(\n        () =>\n            value?.map((el) => {\n                return (\n                    <div key={el} className=\"multi-select-list__item\">\n                        <div>{getTagLabel(el)}</div>\n                        {renderTagsListDeleteBtn(el)}\n                    </div>\n                )\n            }),\n        [value, getTagLabel, renderTagsListDeleteBtn]\n    )\n\n    /**\n     * Рендер списка выбранных пунктов меню для типа \"ListView\"\n     */\n    const tagsListView = useMemo(\n        () =>\n            value?.map((el) => {\n                return (\n                    <div key={el} className=\"multi-select-list__item\">\n                        <div>{getTagLabel(el)}</div>\n                        <div>\n                            {renderTagsListDeleteBtn(el)}\n                            <a\n                                href={`${ROUTE_NAMES.QUESTIONNAIRE_TEMPLATES_EDIT}/${el}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <IconsAdapter iconType=\"EyeOutlined\" />\n                            </a>\n                        </div>\n                    </div>\n                )\n            }),\n        [value, getTagLabel, renderTagsListDeleteBtn]\n    )\n\n    /**\n     * Рендер пункта \"Выбрать все/снять выделение\"\n     */\n    const renderMenuItemSelectAll = useMemo(() => {\n        return (\n            <span className=\"select-all-option\" onClick={handleSelectAllChange}>\n                {value?.length ? 'Снять выделение' : 'Выбрать все'}\n            </span>\n        )\n    }, [value, handleSelectAllChange])\n\n    /**\n     * Возвращает дерево данных для селекта в зависимости от флага selectAll\n     * @param selectAll - определяет наличие пункта \"Выбрать все\" в дереве данных\n     * @return\n     */\n    const getTreeData = useCallback(\n        (selectAll?: boolean) => {\n            if (selectAll)\n                return [\n                    {\n                        title: renderMenuItemSelectAll,\n                        disableCheckbox: true,\n                        disabled: true,\n                        key: 'all',\n                    },\n                    ...treeData,\n                ]\n\n            return treeData\n        },\n        [renderMenuItemSelectAll, treeData]\n    )\n\n    const selectClasses = useMemo(\n        () =>\n            calculateClass([\n                'form-control',\n                'multi-select-control',\n                tagsType ? 'multi-select-control_has-tags-cloud' : '',\n            ]),\n        [tagsType]\n    )\n\n    return (\n        <div className={selectClasses}>\n            <div className={addonAfter ? 'multi-select-addon-after' : ''}>\n                <TreeSelect\n                    defaultValue={value}\n                    dropdownClassName={calculateClass([\n                        'multi-select-control__dropdown',\n                        selectAll\n                            ? 'multi-select-control__dropdown_select-all'\n                            : '',\n                    ])}\n                    treeNodeFilterProp=\"title\"\n                    treeData={getTreeData(selectAll)}\n                    showArrow={true}\n                    onChange={onChange}\n                    value={value}\n                    placeholder={\n                        tagsType\n                            ? ''\n                            : placeholder || SELECT_SEARCH_PLACEHOLDER_DEFAULT\n                    }\n                    treeCheckable={true}\n                    showCheckedStrategy=\"SHOW_PARENT\"\n                    {...additionalProps}\n                />\n                {addonAfter && (\n                    <div className=\"addon-after-content\">{addonAfter}</div>\n                )}\n            </div>\n            {tagsCloud && tagsType === TagsType.Cloud && (\n                <div className=\"multi-select-tags\">{tagsCloud}</div>\n            )}\n            {tagsList && tagsType === TagsType.List && (\n                <div className=\"multi-select-list\">{tagsList}</div>\n            )}\n            {tagsListView && tagsType === TagsType.ListView && (\n                <div className=\"multi-select-list-view\">{tagsListView}</div>\n            )}\n        </div>\n    )\n})\n","import './RadioControl.scss'\n\nimport React from 'react'\nimport { Radio } from 'antd'\n\nimport { RadioControlProps } from './RadioControl.model'\n\n/**\n * Декоратор для `RadioGroup` от `antd`, принимает все теже `props`\n */\nexport const RadioControl: React.FC<RadioControlProps> = React.memo((props) => {\n    const { values = [], ...restProps } = props\n\n    return (\n        <div className=\"form-control radio-control\">\n            <Radio.Group {...restProps}>\n                {values.map((el) => (\n                    <Radio key={String(el.key)} value={el.value}>\n                        {el.label}\n                    </Radio>\n                ))}\n            </Radio.Group>\n        </div>\n    )\n})\n","import './RadioButtonControl.scss'\n\nimport React, { ReactText, useCallback, useState } from 'react'\nimport { Radio } from 'antd'\n\nimport { RadioButtonControlProps } from './RadioButtonControl.model'\n\n/**\n * Декоратор для `RadioGroup` от `antd`\n */\nexport const RadioButtonControl: React.FC<RadioButtonControlProps> = React.memo(\n    (props) => {\n        const {\n            values = [],\n            dependencies,\n            value,\n            onChange,\n            form,\n            ...restProps\n        } = props\n\n        const [valueState, setValueState] = useState<ReactText>()\n\n        /**\n         * Обновить значение в стейте и внешней форме\n         */\n        const triggerChanges = useCallback(\n            (value: ReactText) => {\n                setValueState(value)\n                if (onChange) onChange(value)\n            },\n            [onChange]\n        )\n\n        /**\n         * Обработчик изменения значения RadioGroup\n         */\n        const handleRadioGroupChange = useCallback(\n            (event) => {\n\n                const startTrigger = () => {\n                    if (event?.target?.value) {\n                        triggerChanges(event.target.value)\n                    }\n                }\n\n                startTrigger()\n            },\n            [triggerChanges]\n        )\n\n        return (\n            <div className=\"form-control radio-button-control\">\n                <Radio.Group\n                    onChange={handleRadioGroupChange}\n                    value={value || valueState}\n                    {...restProps}\n                >\n                    {values.map((el) => (\n                        <Radio.Button key={String(el.key)} value={el.value}>\n                            {el.label}\n                        </Radio.Button>\n                    ))}\n                </Radio.Group>\n            </div>\n        )\n    }\n)\n","import './RadioLevelControl.scss'\n\nimport React, { useCallback, useMemo } from 'react'\nimport { Col, Radio, Row } from 'antd'\n\nimport { RadioControlProps } from './RadioControl.model'\n\n/**\n * Декоратор для `RadioGroup` от `antd`, принимает все теже `props`\n */\nexport const RadioLevelControl: React.FC<RadioControlProps> = React.memo(\n    (props) => {\n        const {\n            values = [],\n            label,\n            labelCol = { xs: 8 },\n            valueCol = { xs: 16 },\n            rowOptions,\n            ...restProps\n        } = props\n\n        const renderLevel = useCallback(\n            (count: number) =>\n                new Array(count).fill('').map((_, i) => <span key={i} />),\n            []\n        )\n\n        const radios = useMemo(() => {\n            return values\n                .map((el) => (\n                    <Radio\n                        key={String(el.key)}\n                        value={el.value}\n                        className=\"radio-level-control__level\"\n                        style={{\n                            width: `calc(100% / ${values.length} * ${Number(\n                                el.value\n                            )})`,\n                        }}\n                    >\n                        <div className=\"radio-level-control__grid\">\n                            {renderLevel(Number(el.value))}\n                        </div>\n                        <div\n                            className=\"radio-level-control__label\"\n                            style={{\n                                width: `calc(100% / ${Number(el.value)})`,\n                            }}\n                        >\n                            {el.label}\n                        </div>\n                    </Radio>\n                ))\n                .reverse()\n        }, [renderLevel, values])\n\n        // @ts-ignore\n        return (\n            <div className=\"form-control radio-level-control\">\n                <Row gutter={20} align=\"middle\" {...rowOptions}>\n                    <Col {...valueCol}>\n                        <Radio.Group {...restProps}>{radios}</Radio.Group>\n                    </Col>\n                    <Col {...labelCol}>\n                        {label && (\n                            <div className=\"radio-level-control__group-label\">\n                                {label}\n                            </div>\n                        )}\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n)\n","import './TextAreaControl.scss'\n\nimport React from 'react'\nimport { INPUT_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { Input } from 'antd'\n\nimport { TextAreaControlProps } from './TextAreaControlProps.model'\n\n/**\n * Декоратор для `TextArea` от `antd`, принимает все теже `props`\n */\nexport const TextAreaControl: React.FC<TextAreaControlProps> = React.memo(\n    (props) => {\n        return (\n            <div className=\"form-control textarea-control\">\n                <Input.TextArea\n                    placeholder={INPUT_PLACEHOLDER_DEFAULT}\n                    {...props}\n                />\n            </div>\n        )\n    }\n)\n","import './SelectControl.scss'\n\nimport React, { useCallback, useState } from 'react'\nimport { LabeledValue } from 'antd/lib/select'\nimport { SELECT_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { Select } from 'antd'\nimport { calculateClass } from 'shared/utils'\n\nimport { SelectControlProps } from './SelectControlProps.model'\n\n/**\n * Декоратор для `Select` от `antd`\n */\nexport const SelectControl: React.FC<SelectControlProps<\n    number | LabeledValue\n>> = React.memo((props) => {\n    const {\n        values = [],\n        dropdownClassName,\n        dependencies,\n        value,\n        onChange,\n        form,\n        ...restProps\n    } = props\n    const dropdownClasses = calculateClass([\n        'select-control__dropdown',\n        dropdownClassName ? dropdownClassName : '',\n    ])\n\n    const [valueState, setValueState] = useState<number>()\n\n    /**\n     * Обновить значение в стейте и внешней форме\n     */\n    const triggerChanges = useCallback(\n        (value: number) => {\n            setValueState(value)\n            if (onChange) onChange(value)\n        },\n        [onChange]\n    )\n\n    /**\n     * Обработчик изменения значения Select\n     */\n    const handleSelectChange = useCallback(\n        (number) => {\n\n            const startTrigger = () => {\n                triggerChanges(number)\n            }\n\n            startTrigger()\n        },\n        [triggerChanges]\n    )\n\n    return (\n        <div className=\"form-control select-control\">\n            <Select\n                value={value || valueState}\n                onChange={handleSelectChange}\n                placeholder={SELECT_PLACEHOLDER_DEFAULT}\n                {...restProps}\n                dropdownClassName={dropdownClasses}\n                options={values}\n            />\n        </div>\n    )\n})\n","export const dateFormatList = ['DD/MM/YYYY', 'DD/MM/YY']\n","import './DatePickerControl.scss'\n\nimport React, { useCallback, useState } from 'react'\nimport moment, { Moment } from 'moment'\nimport { DatePicker } from 'antd'\nimport { formatDate } from 'shared/utils'\n\nimport { DatePickerControlProps } from './DatePickerControlProps.model'\nimport { dateFormatList } from './consts'\n\n/**\n * Декоратор для `DatePicker` от `antd`\n */\nexport const DatePickerControl: React.FC<DatePickerControlProps> = React.memo(\n    ({ value, onChange }) => {\n        const [date, setDate] = useState<Moment | null>()\n\n        const triggerChange = useCallback(\n            (value: Moment | null) => {\n                const resultDate = formatDate(value)\n\n                if (onChange) onChange(resultDate)\n            },\n            [onChange]\n        )\n\n        const handleDateChange = useCallback(\n            (value: Moment | null) => {\n                setDate(value)\n                triggerChange(value)\n            },\n            [triggerChange]\n        )\n\n        return (\n            <div className=\"form-control date-picker-control\">\n                <DatePicker\n                    format={dateFormatList}\n                    onChange={handleDateChange}\n                    value={(value && moment(value)) || date}\n                />\n            </div>\n        )\n    }\n)\n","import './TreeSelectControl.scss'\n\nimport React from 'react'\nimport { SELECT_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { TreeSelect } from 'antd'\n\nimport { TreeSelectControlProps } from './TreeSelectControlProps.model'\n\n/**\n * Декоратор для `TreeSelect` от `antd`, принимает все теже `props`\n */\nexport const TreeSelectControl: React.FC<TreeSelectControlProps<\n    number[]\n>> = React.memo((props) => {\n    return (\n        <div className=\"form-control tree-select-control\">\n            <TreeSelect\n                placeholder={SELECT_PLACEHOLDER_DEFAULT}\n                dropdownClassName=\"tree-select-control__dropdown\"\n                treeNodeFilterProp=\"title\"\n                {...props}\n            />\n        </div>\n    )\n})\n","export const dateFormatList = ['DD/MM/YYYY', 'DD/MM/YY']\n","import './SwitchControl.scss'\r\n\r\nimport React from 'react'\r\nimport { Switch } from 'antd'\r\n\r\nimport { SwitchControlProps } from './SwitchControl.model'\r\n\r\n/**\r\n * Декоратор для `Switch` от `antd`, принимает все теже `props`\r\n */\r\nexport const SwitchControl: React.FC<SwitchControlProps> = React.memo(\r\n    (props) => {\r\n        return (\r\n            <div className=\"form-control switch-control\">\r\n                <Switch {...props} />\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import './ControlGroup.scss'\n\nimport React from 'react'\n\nimport { ControlGroupProps } from './ControlGroup.model'\n\n/**\n * Группировка для контролов\n */\nexport const ControlGroup: React.FC<ControlGroupProps> = React.memo(\n    ({ children, type, className, title }) => {\n        const classes = [\n            'control-group',\n            type ? 'control-group_' + type : undefined,\n            className,\n        ]\n\n        return (\n            <div className={classes.join(' ')}>\n                {title && <h4>{title}</h4>}\n                {children}\n            </div>\n        )\n    }\n)\n","import './RangePickerControl.scss'\n\nimport React from 'react'\nimport { DatePicker } from 'antd'\n\nimport { RangePickerControlProps } from './RangePickerControlProps.model'\nimport { dateFormatList } from './consts'\n\nconst { RangePicker } = DatePicker\n\n/**\n * Декоратор для `RangePicker` от `antd`, принимает все теже `props`\n */\nexport const RangePickerControl: React.FC<RangePickerControlProps> = React.memo(\n    (props) => {\n        return (\n            <div className=\"form-control range-picker-control\">\n                <RangePicker\n                    format={dateFormatList}\n                    placeholder={['с', 'по']}\n                    {...props}\n                />\n            </div>\n        )\n    }\n)\n","import './UploadDraggerImageControl.scss'\n\nimport React, { useCallback, useState } from 'react'\nimport { IconsAdapter } from 'shared/components'\nimport { RcFile, UploadChangeParam } from 'antd/lib/upload/interface'\nimport { UPLOAD_IMAGE_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { message, Upload } from 'antd'\n\nimport { UploadDraggerImageControlProps } from './UploadDraggerImageControl.model'\n\n/**\n * Декоратор для `Upload.Dragger` от `antd`, принимает все теже `props`\n */\nexport const UploadDraggerImageControl: React.FC<UploadDraggerImageControlProps> = React.memo(\n    ({ placeholder, onChange, ...restProps }) => {\n        const [imageUrl, setImageUrl] = useState<string | ArrayBuffer | null>(\n            null\n        )\n\n        /**\n         * Превью загружаемого изображения\n         * @param info информация о изображении\n         */\n        const handleChange = useCallback(\n            (info: UploadChangeParam) => {\n                const reader = new FileReader()\n                reader.addEventListener('load', () => {\n                    setImageUrl(reader.result)\n                })\n                reader.readAsDataURL(info.file.originFileObj as Blob)\n                if (onChange) onChange(info)\n            },\n            [onChange]\n        )\n\n        /**\n         * Валидация загружаемого баннера\n         * @param file добавляемый файл\n         */\n        const beforeUploadBanner = useCallback((file: RcFile) => {\n            const isJpgOrPng =\n                file.type === 'image/jpeg' || file.type === 'image/png'\n            if (!isJpgOrPng)\n                message.warning(\n                    'Вы можете загрузить только JPG/PNG файлы!'\n                )\n            return isJpgOrPng\n        }, [])\n\n        return (\n            <div className=\"upload-dragger-control\">\n                <Upload.Dragger\n                    accept=\"image/*\"\n                    showUploadList={false}\n                    beforeUpload={beforeUploadBanner}\n                    onChange={handleChange}\n                    {...restProps}\n                >\n                    {imageUrl ? (\n                        <img\n                            src={imageUrl as string}\n                            alt=\"Изображение\"\n                            style={{ width: '100%' }}\n                        />\n                    ) : (\n                        <>\n                            <IconsAdapter\n                                iconType=\"PictureOutlined\"\n                                className=\"img-upload\"\n                            />\n                            <span>\n                                {placeholder ||\n                                    UPLOAD_IMAGE_PLACEHOLDER_DEFAULT}\n                            </span>\n                        </>\n                    )}\n                </Upload.Dragger>\n            </div>\n        )\n    }\n)\n","import './ButtonsToolbar.scss'\n\nimport React from 'react'\nimport { calculateClass } from 'shared/utils'\n\nimport { ButtonsToolbarProps } from './ButtonsToolbar.model'\n\n/**\n * Панель инструментов, группировка для кнопок\n */\n\nexport const ButtonsToolbar: React.FC<ButtonsToolbarProps> = React.memo(\n    ({ children, align = 'flex-end', className, noMargin }) => {\n        const classes = calculateClass([\n            'buttons-toolbar',\n            className,\n            noMargin ? 'buttons-toolbar_no-margin' : undefined,\n        ])\n\n        return (\n            <div className={classes} style={{ justifyContent: align }}>\n                {children}\n            </div>\n        )\n    }\n)\n","export * from './ModalsContext'\r\nexport * from './ModalsContextProps'\r\nexport * from './ModalsContextProvider'\r\n","import React, { FC, useState } from 'react'\n\nimport { ModalsContext } from './ModalsContext'\nimport { ModalsOptionsProps } from '.'\n\nexport const ModalsContextProvider: FC = React.memo(({ children }) => {\n    const [popupAdapterOptions, setPopupAdapterOptions] = useState<\n        ModalsOptionsProps\n    >({})\n\n    return (\n        <ModalsContext.Provider\n            value={{ popupAdapterOptions, setPopupAdapterOptions }}\n        >\n            {children}\n        </ModalsContext.Provider>\n    )\n})\n","export * from './DocumentTitle'\nexport * from './Loader'\nexport * from './User'\nexport * from './Modals'\n","export const LABEL_COL_FULL = { xs: 24 }\nexport const ROW_GUTTER = 20\nexport const ROW_GUTTER_NONE = 0\nexport const COL_RESPONSIVE_FULL = 24\nexport const COL_RESPONSIVE_HALF = 12\nexport const COL_RESPONSIVE_THIRD = 8\nexport const COL_RESPONSIVE_DEFAULT = {\n    lg: COL_RESPONSIVE_HALF,\n    xl: COL_RESPONSIVE_THIRD,\n}\n","interface DependenciesMessagesProps {\n    [key: string]: string\n}\n\nexport const TABLE_EMPTY_MESSAGE = 'Нет данных'\nexport const IMPORT_SUCCESS_MESSAGE = 'Импорт завершен!'\nexport const EVENT_PUBLISH_SUCCESS_MESSAGE = 'Мероприятие успешно опубликовано!'\nexport const EVENT_SAVE_SUCCESS_MESSAGE = 'Мероприятие успешно сохранено!'\nexport const JOB_PROFILE_CREATE_SUCCESS_MESSAGE = 'Профиль успешно добавлен!'\nexport const JOB_PROFILE_UPDATE_SUCCESS_MESSAGE = 'Профиль успешно обновлен!'\nexport const QUESTIONNAIRES_CONSTRUCTOR_CREATE_SUCCESS_MESSAGE =\n    'Шаблон успешно добавлен!'\nexport const DEPENDENCIES_MESSAGES: DependenciesMessagesProps = {\n    questions:\n        'При изменении данного поля, список вопросов придется заполнять заново...',\n}\n","export const SELECT_SEARCH_PLACEHOLDER_DEFAULT = 'Введите или выберите'\nexport const SELECT_PLACEHOLDER_DEFAULT = 'Выберите вариант'\nexport const INPUT_PLACEHOLDER_DEFAULT = 'Введите значение'\nexport const VALIDATE_MESSAGE_DEFAULT = 'Обязательное поле'\nexport const INPUT_NUMBER_PLACEHOLDER_DEFAULT = '0'\nexport const UPLOAD_IMAGE_PLACEHOLDER_DEFAULT = 'Добавить изображение'\n","import React from 'react'\n\n/** Импорт форм для адаптера */\n// import { CompetenciesGroupForm } from 'shared/forms'\n\n/** Импорт адаптера */\n// import { PopupAdapter } from '.'\n\nexport const Popups: React.FC = React.memo(() => {\n    return <>{/** Модальные окна общего назначения */}</>\n})\n","import React, { useCallback } from 'react'\nimport { Button, Form, Row } from 'antd'\nimport { CheckboxControl, IconsAdapter, InputControl, InputPasswordControl } from 'shared/components'\nimport './AuthModal.sass'\nimport { PopupAdapterFormProps } from '../PopupAdapter.model'\n\nexport const AuthModal: React.FC<PopupAdapterFormProps> = React.memo((props) => {\n       const { onRequestFinish } = props\n\n    const handleFinish = useCallback(\n        (values) => {\n            onRequestFinish!(values)\n\n        },\n        [onRequestFinish])\n\n        return (\n            <div className={'auth-modal'}>\n                <h3 className={'auth-modal__title'}>ВХОД В АККАУНТ</h3>\n\n                <Form\n                    id={'auth'}\n                    initialValues={{ login: 'admin', password: 'admin' }}\n                    size={'large'}\n                    onFinish={handleFinish}\n                >\n                    <Form.Item\n                        name={'login'}>\n                        <InputControl placeholder={'Логин'} prefix={<IconsAdapter iconType={'UserOutlined'}/>}/>\n                    </Form.Item>\n                    <Form.Item name={'password'}>\n                        <InputPasswordControl placeholder={'Логин'} prefix={<IconsAdapter iconType={'LockOutlined'}/>}/>\n                    </Form.Item>\n                    <Row style={{justifyContent: 'space-between'}}>\n                        <Form.Item name={'rememberMe'}\n                        valuePropName={\"checked\"}>\n                            <CheckboxControl>Запомнить меня</CheckboxControl>\n                        </Form.Item>\n                        <Button type={'link'}>Забыл пароль</Button>\n                    </Row>\n\n                    <Button type={'primary'} htmlType={'submit'} className={'submit-btn'}>ВОЙТИ</Button>\n                </Form>\n\n            </div>\n        )\n    }\n)\n","import React, { useCallback, useContext } from 'react'\nimport { Button, Modal } from 'antd'\nimport { LoaderContext, ModalsContext, ModalsOptionsProps } from 'core/context'\n\nimport { PopupAdapterProps } from './PopupAdapter.model'\n\nexport const PopupAdapter: React.FC<PopupAdapterProps> = React.memo(\n    ({\n        component: Component,\n        buttonText = 'Добавить',\n        formId,\n        modalOptions,\n        formOptions,\n        buttonOption,\n        havePopup = true,\n        haveButton = true,\n        recordCopy,\n        onRequestFinish,\n        deleteFormAction,\n        rowSelectionType,\n    }) => {\n        const { loaderState } = useContext(LoaderContext)\n        const { popupAdapterOptions, setPopupAdapterOptions } = useContext(\n            ModalsContext\n        )\n\n        const getRestPopupAdapterOptions = useCallback(\n            (prevState: ModalsOptionsProps) => ({\n                recordCopy,\n                formOptions: {\n                    ...prevState[formId]?.formOptions,\n                    initialValues: formOptions?.initialValues,\n                },\n                modalOptions: {\n                    ...prevState[formId]?.modalOptions,\n                    ...modalOptions,\n                    title: modalOptions?.title || 'Добавить запись',\n                    okText: modalOptions?.okText || 'Отправить',\n                },\n            }),\n            [formId, formOptions, modalOptions, recordCopy]\n        )\n\n        const closeModal = useCallback(\n            () =>\n                setPopupAdapterOptions((prevState) => ({\n                    ...prevState,\n                    [formId]: {\n                        ...prevState[formId],\n                        visible: false,\n                    },\n                })),\n            [formId, setPopupAdapterOptions]\n        )\n\n        const showModal = useCallback(\n            () =>\n                setPopupAdapterOptions((prevState: ModalsOptionsProps) => ({\n                    ...prevState,\n                    [formId]: {\n                        ...prevState[formId],\n                        visible: true,\n                        ...getRestPopupAdapterOptions(prevState),\n                    },\n                })),\n            [formId, getRestPopupAdapterOptions, setPopupAdapterOptions]\n        )\n\n        /**\n         * Обработчик успешной отправки формы\n         */\n        const handleRequestFinish = useCallback(() => {\n            if (onRequestFinish) return onRequestFinish(closeModal)\n        }, [closeModal, onRequestFinish])\n\n        const handleCancel = useCallback(() => {\n            closeModal()\n        }, [closeModal])\n\n        return (\n            <>\n                {haveButton && (\n                    <Button {...buttonOption} onClick={showModal}>\n                        {buttonText}\n                    </Button>\n                )}\n\n                {havePopup && Component && (\n                    <Modal\n                        okButtonProps={{\n                            htmlType: 'submit',\n                            form: formId,\n                            disabled: loaderState,\n                        }}\n                        onCancel={handleCancel}\n                        destroyOnClose\n                        visible={popupAdapterOptions[formId]?.visible}\n                        {...popupAdapterOptions[formId]?.modalOptions}\n                    >\n                        <Component\n                            onRequestFinish={handleRequestFinish()}\n                            deleteFormAction={deleteFormAction}\n                            id={formId}\n                            {...formOptions}\n                            recordCopy={popupAdapterOptions[formId]?.recordCopy}\n                            initialValues={\n                                popupAdapterOptions[formId]?.formOptions\n                                    ?.initialValues\n                            }\n                            rowSelectionType={rowSelectionType}\n                            onCancelSubmit={handleCancel}\n                        />\n                    </Modal>\n                )}\n            </>\n        )\n    }\n)\n","import React  from 'react'\nimport { ConfigProvider } from 'antd'\nimport ru_RU from 'antd/es/locale/ru_RU'\nimport './App.sass'\nimport { Header, Footer } from 'core/components'\nimport { Compose } from 'shared/components'\nimport { Routing } from 'routing'\nimport { DocumentTitleContextProvider, LoaderContextProvider, UserContextProvider, ModalsContextProvider } from 'core/context'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Popups } from 'shared/popups'\n\nexport const App: React.FC = () => {\n    return <div className=\"app\">\n        <ConfigProvider locale={ru_RU}>\n            <Compose\n                components={[\n                    BrowserRouter,\n                    LoaderContextProvider,\n                    UserContextProvider,\n                    DocumentTitleContextProvider,\n                    ModalsContextProvider\n                ]}\n            >\n                <Header/>\n\n                <Routing />\n\n                <Footer/>\n\n                <Popups/>\n            </Compose>\n        </ConfigProvider>\n    </div>\n}","import 'antd/dist/antd.css'\nimport './index.sass'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\n\nReactDOM.render(<App/>, document.getElementById('root'))","import moment, { Moment } from 'moment'\nimport { DataNode } from 'rc-tree-select/lib/interface'\nimport { IconsAdapter } from '../components/IconsAdapter'\nimport { Button, Divider } from 'antd'\nimport React from 'react'\n\ninterface NormalizeDataForTreeSelectProps {\n    [key: string]: any\n}\n\n/**\n * Форматирование даты для отправки на бэк\n * @param date дата в формате Moment\n */\nexport const formatDate = (date?: Moment | string | null) => {\n    if (date) return moment(date).format('L')\n\n    return undefined\n}\n\n/**\n * Нормализация данных, для вывода в TreeSelectControl\n * @param el - очередная запись итерации\n */\nexport const normalizeDataForTreeSelect = (\n    el: NormalizeDataForTreeSelectProps\n): DataNode => {\n    if (el.units?.length) {\n        return {\n            value: el.id,\n            title: el.title,\n            children: el.units.map(normalizeDataForTreeSelect),\n            key: el.id,\n        }\n    }\n\n    return {\n        value: el.id,\n        title: el.title,\n        key: el.id,\n    }\n}\n\n/**\n * Рендер кнопки-ссылки для выпадающего меню селекта\n * @param url - адрес для ссылки\n * @param title\n */\nexport const renderQuestionnairesDropdown = (url: string, title?: string) => (\n    menu: React.ReactElement\n) => (\n    <div>\n        {menu}\n        <Divider />\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            <Button icon={<IconsAdapter iconType=\"PlusCircleOutlined\" />}>\n                {title || 'Создать шаблон'}\n            </Button>\n        </a>\n    </div>\n)","/**\n * Вычисляет классы для элементов\n * @param classes - массив классов\n */\nexport const calculateClass = (classes: (string | undefined)[]): string => {\n    return classes.filter((el) => Boolean(el)).join(' ')\n}\n","import { ROUTE_NAMES } from 'routing'\n\nexport const MAIN_MENU_ITEMS = [\n    { title: 'Категории', link: ROUTE_NAMES.CATEGORIES },\n    { title: 'Подкатегории', link: ROUTE_NAMES.SUBCATEGORIES },\n    { title: 'Вопросы', link: ROUTE_NAMES.QUESTIONS }\n]\n","import './MainMenu.sass'\nimport React, { FC, useContext, useMemo } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { MAIN_MENU_ITEMS } from './MainMenu.consts'\nimport { ROUTE_NAMES } from 'routing'\nimport { UserContext } from 'core/context'\n\n/** Главная страница */\nexport const MainMenu: FC = React.memo(() => {\n    const { userData } = useContext(UserContext)\n\n    const menuRender = useMemo(\n        () =>\n            <>\n                {MAIN_MENU_ITEMS.map((menuItem) => (\n                    <NavLink to={menuItem.link} key={menuItem.title}>\n                        {menuItem.title}\n                    </NavLink>\n                ))}\n                {userData && <NavLink to={ROUTE_NAMES.PROFILE} key={ROUTE_NAMES.PROFILE}>\n                    {userData.name}\n                </NavLink>}\n            </>,\n        [userData]\n    )\n\n    return <nav className=\"nav\">{menuRender}</nav>\n})\n","import './Header.sass'\n\nimport React, { FC, useCallback, useContext, useState } from 'react'\nimport { LoaderContext } from 'core/context'\nimport { useHistory } from 'react-router-dom'\nimport { MainMenu } from './components'\nimport { Button } from 'antd'\nimport { ROUTE_NAMES } from 'routing'\nimport { Link } from 'react-router-dom'\nimport { PopupAdapter, AuthModal } from 'shared/popups'\nimport { Store } from 'rc-field-form/lib/interface'\n\nexport const Header: FC = React.memo(() => {\n    const [ userData, setUserData ] = useState(false)\n    const { setLoaderState } = useContext(LoaderContext)\n    const history = useHistory()\n\n    const handleRequestFinish = useCallback((popupHandler: () => void) => (values: Store) => {\n        try {\n            setLoaderState(true)\n            if (values.login === 'admin' && values.password === 'admin') {\n                popupHandler()\n                            setUserData(true)\n                            history.push(ROUTE_NAMES.PROFILE)\n            }\n        } finally {\n            setLoaderState(false)\n        }\n    }, [setUserData, history, setLoaderState])\n\n    const handleLogout = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        e.preventDefault()\n        localStorage.removeItem('userData')\n        setUserData(false)\n    }\n\n    return (\n        <header className=\"header\">\n            <Link to={ROUTE_NAMES.MAIN}>\n                <h1><i>СВсП</i></h1>\n            </Link>\n            <div className=\"header__menu-wrapper\">\n                <MainMenu/>\n                {userData ? <Button onClick={handleLogout}>ВЫХОД</Button> : <PopupAdapter\n                    component={AuthModal}\n                    formId=\"authForm\"\n                    buttonText=\"ВХОД\"\n                    onRequestFinish={handleRequestFinish}\n                    modalOptions={{footer: null }}\n                />}\n            </div>\n        </header>\n    )\n})\n","import './Footer.sass'\n\nimport React, { FC } from 'react'\n\n\nexport const Footer: FC = React.memo(() => {\n    return (\n        <footer className=\"footer\">\n            <div>2020 <span>(c) Пресвятой Ctrl + Z</span></div>\n        </footer>\n    )\n})\n","import './PageContent.sass'\n\nimport React from 'react'\n\nimport { PageContentProps } from './PageContent.model'\n\nexport const PageContent: React.FC<PageContentProps> = React.memo(\n    ({ children, className }) => (\n        <section className={`page-content${className ? ' ' + className : ''}`}>\n            {children}\n        </section>\n    )\n)\n","import './ContentTitle.scss'\n\nimport React from 'react'\n\nimport { ContentTitleProps } from './ContentTitle.model'\n\nexport const ContentTitle: React.FC<ContentTitleProps> = React.memo(\n    ({ children, className, title }) => (\n        <div className={`content-title${className ? ' ' + className : ''}`}>\n            <h1>{title}</h1>\n            {children}\n        </div>\n    )\n)\n","import { RouteNamesProps } from './Routing.model'\n\nconst PROFILE = 'profile'\nconst STATISTIC = 'statistic'\nconst CATEGORIES = 'categories'\nconst SUBCATEGORIES = 'subcategories'\nconst QUESTIONS = 'questions'\n\nexport const ROUTE_NAMES: RouteNamesProps = {\n    /** Главная страница */\n    MAIN: '/lsd2020',\n    /** Личный кабинет */\n    PROFILE: `/${PROFILE}`,\n    /** Статистика */\n    STATISTIC: `/${STATISTIC}`,\n    /** Таблица категорий */\n    CATEGORIES: `/${CATEGORIES}`,\n    /** Таблица подкатегорий */\n    SUBCATEGORIES: `/${SUBCATEGORIES}`,\n    /** Таблица вопросов */\n    QUESTIONS: `/${QUESTIONS}`\n}","import './MainPage.sass'\n\nimport React from 'react'\nimport { PageContent } from 'core/components'\n\nexport const MainPage: React.FC = React.memo(() => {\n\n    return (\n        <PageContent className=\"main-page\">\n\n        </PageContent>\n    )\n})\n","import './NotFoundPage.scss'\n\nimport React, { FC } from 'react'\nimport { Link } from 'react-router-dom'\nimport { PageContent } from 'core/components'\n\nexport const NotFoundPage: FC = React.memo(() => {\n    return (\n        <PageContent className=\"not-found\">\n            <h1>По Вашему запросу ничего не найдено</h1>\n            <h3>\n                Вы можете перейти на <Link to=\"/\">Главную</Link>\n            </h3>\n        </PageContent>\n    )\n})\n","import './ProfilePage.sass'\n\nimport React, { FC, useContext, useEffect } from 'react'\n\nimport { ProfileProps } from './ProfilePage.model'\nimport { PageContent } from 'core/components'\nimport { UserContext } from 'core/context'\nimport { useHistory } from 'react-router-dom'\nimport { ROUTE_NAMES } from 'routing'\n\nexport const ProfilePage: FC<ProfileProps> = React.memo(() => {\n    const { userData } = useContext(UserContext)\n    const history = useHistory()\n\n    useEffect(() => {\n        if (!userData) history.push(ROUTE_NAMES.MAIN)\n    }, [userData, history])\n\n    return (\n        <PageContent className={'profile'}>\n            Личный кабинет\n        </PageContent>\n    )\n})\n","import { ColumnsType } from 'antd/lib/table'\r\nimport { renderCategoriesActions } from './Categories.utils'\r\nimport { CategoriesModel } from './Categories.model'\r\n\r\nexport const CATEGORIES_TABLE_COLUMNS: ColumnsType<CategoriesModel> = [\r\n    {\r\n        title: 'Категория',\r\n        dataIndex: 'title',\r\n        key: 'title',\r\n    },\r\n    {\r\n        title: '',\r\n        width: 100,\r\n        render: renderCategoriesActions,\r\n        align: 'right',\r\n    }\r\n]","import React from 'react'\r\nimport { IconsAdapter, ButtonsToolbar } from 'shared/components'\r\nimport { PopupAdapter } from 'shared/popups'\r\nimport { CategoriesModel } from './Categories.model'\r\n\r\n/**\r\n * Рендер кнопок управления для записи таблицы категорий\r\n * @param tableRow одна запись таблицы\r\n */\r\nexport const renderCategoriesActions = (tableRow: CategoriesModel) => {\r\n    return (\r\n            <ButtonsToolbar>\r\n                <PopupAdapter\r\n                    formId=\"ConfirmEditForm\"\r\n                    buttonText=\"\"\r\n                    havePopup={false}\r\n                    buttonOption={{\r\n                        type: 'link',\r\n                        icon: <IconsAdapter iconType=\"EditOutlined\" />,\r\n                    }}\r\n                    formOptions={{\r\n                        initialValues: tableRow,\r\n                    }}\r\n                    modalOptions={{\r\n                        title: 'Изменить категорию',\r\n                        footer: null,\r\n                    }}\r\n                />\r\n                <PopupAdapter\r\n                    formId=\"ConfirmDeleteForm\"\r\n                    buttonText=\"\"\r\n                    havePopup={false}\r\n                    buttonOption={{\r\n                        type: 'link',\r\n                        icon: <IconsAdapter iconType=\"DeleteOutlined\" />,\r\n                    }}\r\n                    formOptions={{\r\n                        initialValues: tableRow,\r\n                    }}\r\n                    modalOptions={{\r\n                        title: 'Подтвердите действие',\r\n                        okText: 'Да',\r\n                    }}\r\n                />\r\n            </ButtonsToolbar>\r\n    )\r\n}","import React, { FC, useCallback, useContext } from 'react'\nimport { Form } from 'antd'\nimport { InputControl } from 'shared/components'\nimport { LoaderContext } from 'core/context'\nimport { PopupAdapterFormProps } from 'shared/popups/PopupAdapter.model'\n\n/** Универсальная форма для удаления записи */\nexport const ConfirmDeleteForm: FC<PopupAdapterFormProps> = React.memo(\n    ({\n        onRequestFinish = () => {},\n        deleteFormAction = () => {},\n        initialValues,\n        rowSelectionType,\n        recordCopy,\n        ...props\n    }) => {\n        const { setLoaderState } = useContext(LoaderContext)\n\n        const handleFinish = useCallback(\n            async (values: { id?: number }) => {\n                try {\n                    setLoaderState(true)\n\n                    await deleteFormAction(values.id as number)\n\n                    onRequestFinish()\n                } catch (err) {\n                    onRequestFinish(err)\n                } finally {\n                    setLoaderState(false)\n                }\n            },\n            [deleteFormAction, onRequestFinish, setLoaderState]\n        )\n\n        return (\n            <Form\n                onFinish={handleFinish}\n                {...props}\n                initialValues={initialValues}\n            >\n                Уверены, что хотите удалить?\n                <Form.Item name=\"id\">\n                    <InputControl hidden />\n                </Form.Item>\n            </Form>\n        )\n    }\n)\n","export const CATEGORIES_MOCK = {\r\n    root_categories: [\r\n        {\r\n            id: 1,\r\n            title: 'Военнослужащие и их семьи',\r\n            child: [41]\r\n        },\r\n        {\r\n            id: 1,\r\n            title: 'Дети',\r\n            child: [41]\r\n        },\r\n        {\r\n            id: 1,\r\n            title: 'Инвалиды',\r\n            child: [42]\r\n        },\r\n    ],\r\n    categories: [\r\n        {\r\n            id: 11,\r\n            parent: [1],\r\n            child: [],\r\n            question: [111],\r\n            title: \"Студенты дневных отделений вузов\",\r\n            popular: false,\r\n            link: \"\"\r\n        },\r\n        {\r\n            id: 41,\r\n            parent: [1, 2],\r\n            child: [],\r\n            question: [],\r\n            title: \"Дети военнослужащих\",\r\n            popular: false,\r\n            link: \"\"\r\n        },\r\n        {\r\n            id: 42,\r\n            parent: [2, 3],\r\n            child: [],\r\n            question: [411],\r\n            title: \"Инвалидность в следствии ранения, контузии или увечья\",\r\n            popular: true,\r\n            link: \"\"\r\n        }\r\n    ],\r\n    questions: [\r\n        {\r\n            id: 411,\r\n            parent: [41],\r\n            question: \"Военнослужащие и лица рядового и начальствующего состава органов внутренних дел, государственной противопожарной службы, учреждений и органов уголовно-исполнительной системы, ставших инвалидами вследствие ранения, контузии или увечья, полученных при исполнении обязанностей военной службы (служебных обязанностей)\",\r\n            answer: \"Компенсация коммунальных расходов и оплата проезда\",\r\n            long_answer: \"Компенсация расходов на оплату жилого помещения и коммунальных услуг. Оплата проезда на городском транспорте общего пользования с использованием социальной карты жителя Самарской области жителям г.о. Самара и Тольятти. Право на приобретение единого социального проездного билета на городские и внутрирайонные перевозки всеми видами транспорта общего пользования на территории Самарской области (кроме жителей г.о. Самара и Тольятти). Право проезда по льготному долгосрочному проездному билету на садово-дачные массивы\",\r\n            popular: false,\r\n            doc: \"\",\r\n            link: \"https://suprema63.ru/msdr/portal/social/categories/category.do?categoryId=898335&groupId=121003\"\r\n        },\r\n        {\r\n            id: 111,\r\n            parent: [11],\r\n            question: \"Дети из малообеспеченных семей (студенты дневных отделений высших учебных заведений)\",\r\n            answer: \"Студенты из малоимущих семей могут получить 200 руб ежегодно\",\r\n            long_answer: \"Социальная помощь - предоставление ежегодного социального пособия студентам из малоимущих семей. Право на получение социальной помощи имеют: студенты, обучающиеся в профессиональных образовательных организациях, образовательных организациях высшего образования, осуществляющих образовательную деятельность на территории Самарской области, по основным профессиональным образовательным программам по очной форме обучения за счет бюджетных ассигнований федерального бюджета, бюджета Самарской области, местных бюджетов, не относящиеся к категориям лиц, указанным в абзацах со второго по пятый настоящей части. Социальная помощь оказывается, если среднедушевой доход (доход) семьи (одиноко проживающего гражданина) ниже установленной в Самарской области величины прожиточного минимума по основным социально-демографическим группам на первое число текущего квартала. Размер социальной помощи, оказываемой в виде ежегодного социального пособия студентам из малоимущих семей, составляет 200 рублей.\",\r\n            popular: true,\r\n            doc: \"\",\r\n            link: \"https://suprema63.ru/msdr/portal/social/privileges/privilege/detail.do?categoryId=192633&pconditionId=795074802\"\r\n        }\r\n    ]\r\n}\r\n\r\n\r\n","import React, { FC, useCallback, useContext, useEffect, useState } from 'react'\nimport { Button, Form } from 'antd'\nimport {\n    ButtonsToolbar,\n    InputControl, MultiSelectControl\n} from 'shared/components'\nimport { LABEL_COL_FULL } from 'shared/consts'\nimport { LoaderContext } from 'core/context'\nimport { PopupAdapterFormProps } from 'shared/popups/PopupAdapter.model'\nimport { TagsType } from 'shared/components/controls/MultiSelectControl/MultiSelectControlProps.model'\nimport { normalizeDataForTreeSelect, renderQuestionnairesDropdown } from 'shared/utils'\nimport { ROUTE_NAMES } from 'routing'\nimport { CATEGORIES_MOCK } from 'mocks'\nimport { DataNode } from 'rc-tree-select/lib/interface'\n\n/** Форма добавления/редактирования категорий */\nexport const CategoriesForm: FC<PopupAdapterFormProps> = React.memo(\n    ({\n        onRequestFinish = () => {\n        },\n        deleteFormAction = () => {\n        },\n        initialValues,\n        recordCopy,\n        rowSelectionType,\n        onCancelSubmit,\n        ...props\n    }) => {\n        const { setLoaderState } = useContext(LoaderContext)\n        const [dictionary, setDictionary] = useState<DataNode[]>([])\n\n        /**\n         * Обработчик отправки формы\n         */\n        const handleFinish = useCallback(\n            async (values) => {\n                try {\n                    setLoaderState(true)\n                    console.log(values)\n\n                    const body = {\n                        ...values,\n                        id: initialValues?.id\n                    }\n\n                    console.log(body)\n\n                    onRequestFinish()\n                } catch (err) {\n                    onRequestFinish(err)\n                } finally {\n                    setLoaderState(false)\n                }\n            },\n            [initialValues, onRequestFinish, setLoaderState]\n        )\n\n        /**\n         * Запрос справочника\n         */\n        const dictionaryFetch = useCallback(async () => {\n            try {\n                setDictionary(CATEGORIES_MOCK.categories.map(normalizeDataForTreeSelect))\n            } catch (e) {\n                console.log(e)\n            }\n        }, [setLoaderState])\n\n        useEffect(() => {\n            dictionaryFetch()\n        }, [dictionaryFetch])\n\n        return (\n            <Form\n                onFinish={handleFinish}\n                {...props}\n                initialValues={initialValues}\n            >\n                <Form.Item\n                    name=\"title\"\n                    label=\"Название категории\"\n                    labelCol={LABEL_COL_FULL}\n                    labelAlign=\"left\"\n                >\n                    <InputControl/>\n                </Form.Item>\n\n                <Form.Item\n                    name=\"child\"\n                    label=\"Включает подкатегории\"\n                    labelCol={LABEL_COL_FULL}\n                    labelAlign=\"left\"\n                >\n                    <MultiSelectControl\n                        treeData={dictionary}\n                        showSearch\n                        allowClear\n                        tagsType={TagsType.List}\n                        dropdownRender={renderQuestionnairesDropdown(\n                            ROUTE_NAMES.SUBCATEGORIES,\n                            'Добавить подкатегорию'\n                        )}\n                        notFoundContent=\"Нет данных\"\n                    />\n                </Form.Item>\n\n                <ButtonsToolbar>\n                    <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                    >\n                        {initialValues?.id ? 'Изменить' : 'Создать'}\n                    </Button>\n                    <Button onClick={onCancelSubmit}>Отмена</Button>\n                </ButtonsToolbar>\n            </Form>\n        )\n    }\n)\n","import React, { useCallback, useContext, useEffect, useState } from 'react'\r\nimport { ContentTitle, PageContent } from 'core/components'\r\nimport { Table } from 'antd'\r\nimport { TABLE_EMPTY_MESSAGE } from 'shared/consts'\r\nimport { CATEGORIES_TABLE_COLUMNS } from './Categories.const'\r\nimport { PopupAdapter } from 'shared/popups'\r\nimport { LoaderContext } from 'core/context'\r\nimport { ConfirmDeleteForm } from 'shared/forms'\r\nimport { CATEGORIES_MOCK } from 'mocks'\r\nimport { CategoriesModel } from './Categories.model'\r\nimport { ButtonsToolbar } from 'shared/components'\r\nimport { CategoriesForm } from './components'\r\n\r\n/** Страница категорий */\r\nexport const Categories: React.FC = React.memo(() => {\r\n    const { setLoaderState } = useContext(LoaderContext)\r\n    const [dictionary, setDictionary] = useState<CategoriesModel[]>([])\r\n\r\n    /**\r\n     * Запрос справочника\r\n     */\r\n    const dictionaryFetch = useCallback(async () => {\r\n        try {\r\n            setLoaderState(true)\r\n\r\n            console.log('Запрос за таблицей категорий')\r\n            setDictionary(CATEGORIES_MOCK.root_categories)\r\n        } catch (e) {\r\n            console.log(e)\r\n        } finally {\r\n            setLoaderState(false)\r\n        }\r\n    }, [setLoaderState])\r\n\r\n    /**\r\n     * Обработчик удаления записи\r\n     * @param id\r\n     */\r\n    const handleDelete = useCallback((id: number) => {\r\n        return console.log('Запись удалена! ID: ' + id)\r\n    }, [])\r\n\r\n    const handleRequestFinish = useCallback(\r\n        (popupHandler: () => void) => (err: any) => {\r\n            if (!err) {\r\n                popupHandler()\r\n                dictionaryFetch()\r\n            }\r\n        },\r\n        [dictionaryFetch]\r\n    )\r\n\r\n    useEffect(() => {\r\n        dictionaryFetch()\r\n    }, [dictionaryFetch])\r\n\r\n    return (\r\n        <PageContent>\r\n            <ContentTitle title=\"Категории\" />\r\n\r\n            <ButtonsToolbar>\r\n                <PopupAdapter\r\n                    component={CategoriesForm}\r\n                    formId=\"CategoriesForm\"\r\n                    buttonText=\"Создать категорию\"\r\n                    onRequestFinish={handleRequestFinish}\r\n                    modalOptions={{\r\n                        title: 'Новая категория',\r\n                        footer: null,\r\n                    }}\r\n                />\r\n            </ButtonsToolbar>\r\n\r\n            <Table\r\n                rowKey=\"id\"\r\n                locale={{ emptyText: TABLE_EMPTY_MESSAGE }}\r\n                columns={CATEGORIES_TABLE_COLUMNS}\r\n                dataSource={dictionary}\r\n            />\r\n            <PopupAdapter\r\n                component={CategoriesForm}\r\n                formId=\"ConfirmEditForm\"\r\n                onRequestFinish={handleRequestFinish}\r\n                haveButton={false}\r\n                modalOptions={{\r\n                    title: 'Изменить категорию',\r\n                    footer: null,\r\n                }}\r\n            />\r\n            <PopupAdapter\r\n                component={ConfirmDeleteForm}\r\n                formId=\"ConfirmDeleteForm\"\r\n                onRequestFinish={handleRequestFinish}\r\n                haveButton={false}\r\n                deleteFormAction={handleDelete}\r\n            />\r\n        </PageContent>\r\n    )\r\n})","import { ColumnsType } from 'antd/lib/table'\r\nimport { renderQuestionsActions } from './Questions.utils'\r\nimport { QuestionsModel } from './Questions.model'\r\n\r\nexport const QUESTIONS_TABLE_COLUMNS: ColumnsType<QuestionsModel> = [\r\n    {\r\n        title: 'Вопрос',\r\n        dataIndex: 'question',\r\n        key: 'question',\r\n    },\r\n    {\r\n        title: 'Популярный',\r\n        dataIndex: 'popular',\r\n        key: 'popular',\r\n        render: (isPopular) => isPopular ? 'Да' : '',\r\n        align: 'center',\r\n        width: 200\r\n    },\r\n    {\r\n        title: '',\r\n        width: 100,\r\n        render: renderQuestionsActions,\r\n        align: 'right',\r\n    }\r\n]","import React from 'react'\r\nimport { IconsAdapter, ButtonsToolbar } from 'shared/components'\r\nimport { PopupAdapter } from 'shared/popups'\r\nimport { QuestionsModel } from './Questions.model'\r\n\r\n/**\r\n * Рендер кнопок управления для записи таблицы категорий\r\n * @param tableRow одна запись таблицы\r\n */\r\nexport const renderQuestionsActions = (tableRow: QuestionsModel) => {\r\n    return (\r\n            <ButtonsToolbar>\r\n                <PopupAdapter\r\n                    formId=\"ConfirmEditForm\"\r\n                    buttonText=\"\"\r\n                    havePopup={false}\r\n                    buttonOption={{\r\n                        type: 'link',\r\n                        icon: <IconsAdapter iconType=\"EditOutlined\" />,\r\n                    }}\r\n                    formOptions={{\r\n                        initialValues: tableRow,\r\n                    }}\r\n                    modalOptions={{\r\n                        title: 'Изменить вопрос',\r\n                        footer: null,\r\n                    }}\r\n                />\r\n                <PopupAdapter\r\n                    formId=\"ConfirmDeleteForm\"\r\n                    buttonText=\"\"\r\n                    havePopup={false}\r\n                    buttonOption={{\r\n                        type: 'link',\r\n                        icon: <IconsAdapter iconType=\"DeleteOutlined\" />,\r\n                    }}\r\n                    formOptions={{\r\n                        initialValues: tableRow,\r\n                    }}\r\n                    modalOptions={{\r\n                        title: 'Подтвердите действие',\r\n                        okText: 'Да',\r\n                    }}\r\n                />\r\n            </ButtonsToolbar>\r\n    )\r\n}","import React, { FC, useCallback, useContext, useEffect, useState } from 'react'\nimport { Button, Form } from 'antd'\nimport {\n    ButtonsToolbar,\n    InputControl, MultiSelectControl, TextAreaControl\n} from 'shared/components'\nimport { LABEL_COL_FULL } from 'shared/consts'\nimport { LoaderContext } from 'core/context'\nimport { PopupAdapterFormProps } from 'shared/popups/PopupAdapter.model'\nimport { TagsType } from 'shared/components/controls/MultiSelectControl/MultiSelectControlProps.model'\nimport { normalizeDataForTreeSelect, renderQuestionnairesDropdown } from 'shared/utils'\nimport { ROUTE_NAMES } from 'routing'\nimport { CATEGORIES_MOCK } from 'mocks'\nimport { DataNode } from 'rc-tree-select/lib/interface'\n\n/** Форма добавления/редактирования вопросов */\nexport const QuestionsForm: FC<PopupAdapterFormProps> = React.memo(\n    ({\n        onRequestFinish = () => {\n        },\n        deleteFormAction = () => {\n        },\n        initialValues,\n        recordCopy,\n        rowSelectionType,\n        onCancelSubmit,\n        ...props\n    }) => {\n        const { setLoaderState } = useContext(LoaderContext)\n        const [dictionary, setDictionary] = useState<DataNode[]>([])\n\n        /**\n         * Обработчик отправки формы\n         */\n        const handleFinish = useCallback(\n            async (values) => {\n                try {\n                    setLoaderState(true)\n                    console.log(values)\n\n                    const body = {\n                        ...values,\n                        id: initialValues?.id\n                    }\n\n                    console.log(body)\n\n                    onRequestFinish()\n                } catch (err) {\n                    onRequestFinish(err)\n                } finally {\n                    setLoaderState(false)\n                }\n            },\n            [initialValues, onRequestFinish, setLoaderState]\n        )\n\n        /**\n         * Запрос справочника\n         */\n        const dictionaryFetch = useCallback(async () => {\n            try {\n                setDictionary(CATEGORIES_MOCK.categories.map(normalizeDataForTreeSelect))\n            } catch (e) {\n                console.log(e)\n            }\n        }, [setLoaderState])\n\n        useEffect(() => {\n            dictionaryFetch()\n        }, [dictionaryFetch])\n\n        return (\n            <Form\n                onFinish={handleFinish}\n                {...props}\n                initialValues={initialValues}\n            >\n                <Form.Item\n                    name=\"question\"\n                    label=\"Вопрос\"\n                    labelCol={LABEL_COL_FULL}\n                    labelAlign=\"left\"\n                >\n                    <InputControl/>\n                </Form.Item>\n\n                <Form.Item\n                    name=\"answer\"\n                    label=\"Краткий ответ\"\n                    labelCol={LABEL_COL_FULL}\n                    labelAlign=\"left\"\n                >\n                    <TextAreaControl autoSize={{minRows: 4, maxRows: 4}}/>\n                </Form.Item>\n\n                <Form.Item\n                    name=\"long_answer\"\n                    label=\"Развернутый ответ\"\n                    labelCol={LABEL_COL_FULL}\n                    labelAlign=\"left\"\n                >\n                    <TextAreaControl autoSize={{minRows: 4, maxRows: 4}}/>\n                </Form.Item>\n\n                <Form.Item\n                    name=\"parent\"\n                    label=\"Входит в подкатегории\"\n                    labelCol={LABEL_COL_FULL}\n                    labelAlign=\"left\"\n                >\n                    <MultiSelectControl\n                        treeData={dictionary}\n                        showSearch\n                        allowClear\n                        tagsType={TagsType.List}\n                        dropdownRender={renderQuestionnairesDropdown(\n                            ROUTE_NAMES.SUBCATEGORIES,\n                            'Добавить подкатегорию'\n                        )}\n                        notFoundContent=\"Нет данных\"\n                    />\n                </Form.Item>\n\n                <ButtonsToolbar>\n                    <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                    >\n                        {initialValues?.id ? 'Изменить' : 'Создать'}\n                    </Button>\n                    <Button onClick={onCancelSubmit}>Отмена</Button>\n                </ButtonsToolbar>\n            </Form>\n        )\n    }\n)\n","import React from 'react'\r\n\r\nexport const QuestionsFilters: React.FC = React.memo(() => {\r\n    return (\r\n        <div>\r\n            Фильтры\r\n        </div>\r\n    )\r\n})\r\n","import React, { useCallback, useContext, useEffect, useState } from 'react'\r\nimport { ContentTitle, PageContent } from 'core/components'\r\nimport { Table } from 'antd'\r\nimport { TABLE_EMPTY_MESSAGE } from 'shared/consts'\r\nimport { QUESTIONS_TABLE_COLUMNS } from './Questions.const'\r\nimport { PopupAdapter } from 'shared/popups'\r\nimport { LoaderContext } from 'core/context'\r\nimport { ConfirmDeleteForm } from 'shared/forms'\r\nimport { CATEGORIES_MOCK } from 'mocks'\r\nimport { QuestionsModel } from './Questions.model'\r\nimport { ButtonsToolbar } from 'shared/components'\r\nimport { QuestionsForm } from './components'\r\n\r\n/** Таблица вопросов */\r\nexport const Questions: React.FC = React.memo(() => {\r\n    const { setLoaderState } = useContext(LoaderContext)\r\n    const [dictionary, setDictionary] = useState<QuestionsModel[]>([])\r\n\r\n    /**\r\n     * Запрос справочника\r\n     */\r\n    const dictionaryFetch = useCallback(async () => {\r\n        try {\r\n            setLoaderState(true)\r\n\r\n            console.log('Запрос за таблицей вопросов')\r\n            setDictionary(CATEGORIES_MOCK.questions)\r\n        } catch (e) {\r\n            console.log(e)\r\n        } finally {\r\n            setLoaderState(false)\r\n        }\r\n    }, [setLoaderState])\r\n\r\n    /**\r\n     * Обработчик удаления записи\r\n     * @param id\r\n     */\r\n    const handleDelete = useCallback((id: number) => {\r\n        return console.log('Запись удалена! ID: ' + id)\r\n    }, [])\r\n\r\n    const handleRequestFinish = useCallback(\r\n        (popupHandler: () => void) => (err: any) => {\r\n            if (!err) {\r\n                popupHandler()\r\n                dictionaryFetch()\r\n            }\r\n        },\r\n        [dictionaryFetch]\r\n    )\r\n\r\n    useEffect(() => {\r\n        dictionaryFetch()\r\n    }, [dictionaryFetch])\r\n\r\n    return (\r\n        <PageContent>\r\n\r\n            <ContentTitle title=\"Вопросы\" />\r\n\r\n            <ButtonsToolbar>\r\n                <PopupAdapter\r\n                    component={QuestionsForm}\r\n                    formId=\"QuestionsForm\"\r\n                    buttonText=\"Создать вопрос\"\r\n                    onRequestFinish={handleRequestFinish}\r\n                    modalOptions={{\r\n                        title: 'Новый вопрос',\r\n                        footer: null,\r\n                    }}\r\n                />\r\n            </ButtonsToolbar>\r\n\r\n            <Table\r\n                rowKey=\"id\"\r\n                locale={{ emptyText: TABLE_EMPTY_MESSAGE }}\r\n                columns={QUESTIONS_TABLE_COLUMNS}\r\n                dataSource={dictionary}\r\n            />\r\n            <PopupAdapter\r\n                component={QuestionsForm}\r\n                formId=\"ConfirmEditForm\"\r\n                onRequestFinish={handleRequestFinish}\r\n                haveButton={false}\r\n                modalOptions={{\r\n                    title: 'Изменить вопрос',\r\n                    footer: null,\r\n                }}\r\n            />\r\n            <PopupAdapter\r\n                component={ConfirmDeleteForm}\r\n                formId=\"ConfirmDeleteForm\"\r\n                onRequestFinish={handleRequestFinish}\r\n                haveButton={false}\r\n                deleteFormAction={handleDelete}\r\n            />\r\n        </PageContent>\r\n    )\r\n})","import { ColumnsType } from 'antd/lib/table'\r\nimport { renderSubcategoriesActions } from './Subcategories.utils'\r\nimport { SubcategoriesModel } from './Subcategories.model'\r\n\r\nexport const SUBCATEGORIES_TABLE_COLUMNS: ColumnsType<SubcategoriesModel> = [\r\n    {\r\n        title: 'Подкатегория',\r\n        dataIndex: 'title',\r\n        key: 'title',\r\n    },\r\n    {\r\n        title: 'Популярный',\r\n        dataIndex: 'popular',\r\n        key: 'popular',\r\n        align: 'center',\r\n        render: (isPopular) => isPopular ? 'Да' : ''\r\n    },\r\n    {\r\n        title: '',\r\n        width: 100,\r\n        render: renderSubcategoriesActions,\r\n        align: 'right',\r\n    }\r\n]","import React from 'react'\r\nimport { IconsAdapter, ButtonsToolbar } from 'shared/components'\r\nimport { PopupAdapter } from 'shared/popups'\r\nimport { SubcategoriesModel } from './Subcategories.model'\r\n\r\n/**\r\n * Рендер кнопок управления для записи таблицы категорий\r\n * @param tableRow одна запись таблицы\r\n */\r\nexport const renderSubcategoriesActions = (tableRow: SubcategoriesModel) => {\r\n    return (\r\n            <ButtonsToolbar>\r\n                <PopupAdapter\r\n                    formId=\"ConfirmEditForm\"\r\n                    buttonText=\"\"\r\n                    havePopup={false}\r\n                    buttonOption={{\r\n                        type: 'link',\r\n                        icon: <IconsAdapter iconType=\"EditOutlined\" />,\r\n                    }}\r\n                    formOptions={{\r\n                        initialValues: tableRow,\r\n                    }}\r\n                    modalOptions={{\r\n                        title: 'Изменить подкатегорию',\r\n                        footer: null,\r\n                    }}\r\n                />\r\n                <PopupAdapter\r\n                    formId=\"ConfirmDeleteForm\"\r\n                    buttonText=\"\"\r\n                    havePopup={false}\r\n                    buttonOption={{\r\n                        type: 'link',\r\n                        icon: <IconsAdapter iconType=\"DeleteOutlined\" />,\r\n                    }}\r\n                    formOptions={{\r\n                        initialValues: tableRow,\r\n                    }}\r\n                    modalOptions={{\r\n                        title: 'Подтвердите действие',\r\n                        okText: 'Да',\r\n                    }}\r\n                />\r\n            </ButtonsToolbar>\r\n    )\r\n}","import React, { FC, useCallback, useContext, useEffect, useState } from 'react'\nimport { Button, Form } from 'antd'\nimport {\n    ButtonsToolbar,\n    InputControl, MultiSelectControl\n} from 'shared/components'\nimport { LABEL_COL_FULL } from 'shared/consts'\nimport { LoaderContext } from 'core/context'\nimport { PopupAdapterFormProps } from 'shared/popups/PopupAdapter.model'\nimport { TagsType } from 'shared/components/controls/MultiSelectControl/MultiSelectControlProps.model'\nimport { normalizeDataForTreeSelect, renderQuestionnairesDropdown } from 'shared/utils'\nimport { ROUTE_NAMES } from 'routing'\nimport { CATEGORIES_MOCK } from 'mocks'\nimport { DictionaryModel } from './SubcategoriesForm.model'\n\n/** Форма добавления/редактирования подкатегорий */\nexport const SubcategoriesForm: FC<PopupAdapterFormProps> = React.memo(\n    ({\n        onRequestFinish = () => {\n        },\n        deleteFormAction = () => {\n        },\n        initialValues,\n        recordCopy,\n        rowSelectionType,\n        onCancelSubmit,\n        ...props\n    }) => {\n        const { setLoaderState } = useContext(LoaderContext)\n        const [dictionary, setDictionary] = useState<DictionaryModel>()\n\n        /**\n         * Обработчик отправки формы\n         */\n        const handleFinish = useCallback(\n            async (values) => {\n                try {\n                    setLoaderState(true)\n                    console.log(values)\n\n                    const body = {\n                        ...values,\n                        id: initialValues?.id\n                    }\n\n                    console.log(body)\n\n                    onRequestFinish()\n                } catch (err) {\n                    onRequestFinish(err)\n                } finally {\n                    setLoaderState(false)\n                }\n            },\n            [initialValues, onRequestFinish, setLoaderState]\n        )\n\n        /**\n         * Запрос справочника\n         */\n        const dictionaryFetch = useCallback(async () => {\n            try {\n                setDictionary({\n                    subcategories: CATEGORIES_MOCK.categories.map(normalizeDataForTreeSelect),\n                    questions: CATEGORIES_MOCK.questions.map(el => ({\n                            value: el.id,\n                            title: el.question,\n                            key: el.id\n                        })\n                    )\n                })\n            } catch (e) {\n                console.log(e)\n            }\n        }, [setLoaderState])\n\n        useEffect(() => {\n            dictionaryFetch()\n        }, [dictionaryFetch])\n\n        return (\n            <Form\n                onFinish={handleFinish}\n                {...props}\n                initialValues={initialValues}\n            >\n                <Form.Item\n                    name=\"title\"\n                    label=\"Название подкатегории\"\n                    labelCol={LABEL_COL_FULL}\n                    labelAlign=\"left\"\n                >\n                    <InputControl/>\n                </Form.Item>\n\n                <Form.Item\n                    name=\"child\"\n                    label=\"Включает подкатегории\"\n                    labelCol={LABEL_COL_FULL}\n                    labelAlign=\"left\"\n                >\n                    <MultiSelectControl\n                        treeData={dictionary?.subcategories || []}\n                        showSearch\n                        allowClear\n                        tagsType={TagsType.List}\n                    />\n                </Form.Item>\n\n                <Form.Item\n                    name=\"question\"\n                    label=\"Включает вопросы\"\n                    labelCol={LABEL_COL_FULL}\n                    labelAlign=\"left\"\n                >\n                    <MultiSelectControl\n                        treeData={dictionary?.questions || []}\n                        showSearch\n                        allowClear\n                        dropdownRender={renderQuestionnairesDropdown(\n                            ROUTE_NAMES.QUESTIONS,\n                            'Добавить вопрос'\n                        )}\n                        notFoundContent=\"Нет данных\"\n                    />\n                </Form.Item>\n\n                <ButtonsToolbar>\n                    <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                    >\n                        {initialValues?.id ? 'Изменить' : 'Создать'}\n                    </Button>\n                    <Button onClick={onCancelSubmit}>Отмена</Button>\n                </ButtonsToolbar>\n            </Form>\n        )\n    }\n)\n","import React, { useCallback, useContext, useEffect, useState } from 'react'\r\nimport { ContentTitle, PageContent } from 'core/components'\r\nimport { Table } from 'antd'\r\nimport { TABLE_EMPTY_MESSAGE } from 'shared/consts'\r\nimport { SUBCATEGORIES_TABLE_COLUMNS } from './Subcategories.const'\r\nimport { PopupAdapter } from 'shared/popups'\r\nimport { LoaderContext } from 'core/context'\r\nimport { ConfirmDeleteForm } from 'shared/forms'\r\nimport { CATEGORIES_MOCK } from 'mocks'\r\nimport { SubcategoriesModel } from './Subcategories.model'\r\nimport { ButtonsToolbar } from 'shared/components'\r\nimport { SubcategoriesForm } from './components'\r\n\r\n/** Страница подкатегорий */\r\nexport const Subcategories: React.FC = React.memo(() => {\r\n    const { setLoaderState } = useContext(LoaderContext)\r\n    const [dictionary, setDictionary] = useState<SubcategoriesModel[]>([])\r\n\r\n    /**\r\n     * Запрос справочника\r\n     */\r\n    const dictionaryFetch = useCallback(async () => {\r\n        try {\r\n            setLoaderState(true)\r\n\r\n            console.log('Запрос за таблицей подкатегорий')\r\n            setDictionary(CATEGORIES_MOCK.categories)\r\n        } catch (e) {\r\n            console.log(e)\r\n        } finally {\r\n            setLoaderState(false)\r\n        }\r\n    }, [setLoaderState])\r\n\r\n    /**\r\n     * Обработчик удаления записи\r\n     * @param id\r\n     */\r\n    const handleDelete = useCallback((id: number) => {\r\n        return console.log('Запись удалена! ID: ' + id)\r\n    }, [])\r\n\r\n    const handleRequestFinish = useCallback(\r\n        (popupHandler: () => void) => (err: any) => {\r\n            if (!err) {\r\n                popupHandler()\r\n                dictionaryFetch()\r\n            }\r\n        },\r\n        [dictionaryFetch]\r\n    )\r\n\r\n    useEffect(() => {\r\n        dictionaryFetch()\r\n    }, [dictionaryFetch])\r\n\r\n    return (\r\n        <PageContent>\r\n\r\n            <ContentTitle title=\"Подкатегории\" />\r\n\r\n            <ButtonsToolbar>\r\n                <PopupAdapter\r\n                    component={SubcategoriesForm}\r\n                    formId=\"SubcategoriesForm\"\r\n                    buttonText=\"Создать подкатегорию\"\r\n                    onRequestFinish={handleRequestFinish}\r\n                    modalOptions={{\r\n                        title: 'Новая подкатегория',\r\n                        footer: null,\r\n                    }}\r\n                />\r\n            </ButtonsToolbar>\r\n\r\n            <Table\r\n                rowKey=\"id\"\r\n                locale={{ emptyText: TABLE_EMPTY_MESSAGE }}\r\n                columns={SUBCATEGORIES_TABLE_COLUMNS}\r\n                dataSource={dictionary}\r\n            />\r\n            <PopupAdapter\r\n                component={SubcategoriesForm}\r\n                formId=\"ConfirmEditForm\"\r\n                onRequestFinish={handleRequestFinish}\r\n                haveButton={false}\r\n                modalOptions={{\r\n                    title: 'Изменить подкатегорию',\r\n                    footer: null,\r\n                }}\r\n            />\r\n            <PopupAdapter\r\n                component={ConfirmDeleteForm}\r\n                formId=\"ConfirmDeleteForm\"\r\n                onRequestFinish={handleRequestFinish}\r\n                haveButton={false}\r\n                deleteFormAction={handleDelete}\r\n            />\r\n        </PageContent>\r\n    )\r\n})","import './Routing.scss'\n\nimport React, { FC, useContext, useMemo } from 'react'\nimport { MainPage, NotFoundPage, ProfilePage, Categories, Questions, Subcategories } from 'pages'\nimport { LoaderContext } from 'core/context'\n\nimport { ROUTE_NAMES } from './routeNames.const'\nimport { Route, Switch } from 'react-router-dom'\n\nexport const Routing: FC = React.memo(() => {\n    const { loaderState } = useContext(LoaderContext)\n\n    const contentStyles = useMemo(() => {\n        if (!loaderState) {\n            return 'content scroll'\n        }\n\n        return 'content scroll with-loader'\n    }, [loaderState])\n\n    return (\n        <div className={contentStyles}>\n\n            <Switch>\n                {/* Главная страница */}\n                <Route path={ROUTE_NAMES.MAIN} exact>\n                        <Categories/>\n                </Route>\n\n                {/* Личный кабинет */}\n                <Route path={ROUTE_NAMES.PROFILE} >\n                        <ProfilePage/>\n                </Route>\n\n                {/* Таблица категорий */}\n                <Route path={ROUTE_NAMES.CATEGORIES} >\n                    <Categories/>\n                </Route>\n\n                {/* Таблица подкатегорий */}\n                <Route path={ROUTE_NAMES.SUBCATEGORIES} >\n                    <Subcategories/>\n                </Route>\n\n                {/* Таблица вопросов */}\n                <Route path={ROUTE_NAMES.QUESTIONS} >\n                    <Questions/>\n                </Route>\n\n                {/* Ловушка неизвестных роутов */}\n                <Route component={NotFoundPage}/>\n            </Switch>\n        </div>\n    )\n})\n","import { TreeSelectProps } from 'antd/lib/tree-select'\nimport { ReactNode } from 'react'\n\nexport enum TagsType {\n    'Cloud' = 'Cloud',\n    'List' = 'List',\n    'ListView' = 'ListView',\n}\n\n/**\n * Интерфейс для MultiSelectControl\n * @param onChange - callback при изменении компонента\n * @param tagsType - тип вывода выбранных пунктов меню\n * @param selectAll - отображение пункта \"Выбрать все\"\n */\nexport interface MultiSelectControlProps<T> extends TreeSelectProps<T> {\n    onChange?: (value: T) => void\n    tagsType?: TagsType\n    selectAll?: boolean\n    addonAfter?: ReactNode\n}\n"],"sourceRoot":""}