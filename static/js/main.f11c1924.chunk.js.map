{"version":3,"sources":["core/errors/NotImplementedError.ts","core/context/DocumentTitle/DocumentTitleContext.ts","core/context/Loader/LoaderContext.ts","core/context/Modals/ModalsContext.ts","core/context/DocumentTitle/index.ts","core/context/DocumentTitle/DocumentTitleContextProvider.tsx","core/context/Loader/index.ts","core/context/Loader/LoaderContextProvider.tsx","core/context/User/index.ts","core/context/User/UserContext.ts","core/context/User/UserContextProvider.tsx","core/context/Modals/index.ts","core/context/Modals/ModalsContextProvider.tsx","shared/consts/layout.consts.ts","shared/consts/messages.consts.ts","shared/consts/forms.consts.ts","shared/components/controls/MultiSelectControl/MultiSelectControlProps.model.ts","shared/components/Compose/Compose.tsx","shared/components/controls/CheckboxControl/CheckboxControl.tsx","shared/components/controls/CheckboxControl/CheckboxGroupControl.tsx","shared/components/controls/InputControl/InputPasswordControl.tsx","shared/components/controls/InputControl/InputControl.tsx","shared/utils/common.utils.ts","shared/components/controls/InputControl/InputNumberControl.tsx","shared/components/controls/MultiSelectControl/MultiSelectControl.tsx","shared/components/controls/RadioControl/RadioControl.tsx","shared/components/controls/RadioControl/RadioButtonControl.tsx","shared/components/controls/RadioControl/RadioLevelControl.tsx","shared/components/controls/TextAreaControl/TextAreaControl.tsx","shared/components/controls/SelectControl/SelectControl.tsx","shared/components/controls/DatePickerControl/consts.ts","shared/components/controls/DatePickerControl/DatePickerControl.tsx","shared/utils/form.utils.tsx","shared/components/controls/TreeSelectControl/TreeSelectControl.tsx","shared/components/controls/SwitchControl/SwitchControl.tsx","shared/components/controls/ControlGroup/ControlGroup.tsx","shared/components/controls/CloneControl/CloneControl.tsx","shared/components/controls/RangePickerControl/consts.ts","shared/components/controls/RangePickerControl/RangePickerControl.tsx","shared/components/controls/UploadDraggerImageControl/UploadDraggerImageControl.tsx","shared/components/IconsAdapter/IconsAdapter.tsx","shared/components/ButtonsToolbar/ButtonsToolbar.tsx","core/context/index.ts","App.tsx","index.tsx","core/components/Header/Header.tsx","core/components/Footer/Footer.tsx","core/components/PageContent/PageContent.tsx","core/components/ContentTitle/ContentTitle.tsx","routing/routeNames.const.ts","pages/NotFound/NotFoundPage.tsx","shared/forms/ConfirmDeleteForm/ConfirmDeleteForm.tsx","mocks/ServicesMock.ts","pages/Services/components/ServicesPage/Services.consts.ts","pages/Services/components/ServicesPage/Services.utils.tsx","pages/Services/components/ServicesPage/ServicesPage.tsx","pages/Services/components/ServicesForm/ServicesForm.tsx","pages/Services/Services.tsx","routing/Routing.tsx","shared/popups/Popups.tsx","shared/popups/AuthModal/AuthModal.tsx","shared/popups/PopupAdapter.tsx"],"names":["NotImplementedError","Error","DocumentTitleContext","React","createContext","updateTitle","newTitle","LoaderContext","loaderState","setLoaderState","state","ModalsContext","DocumentTitleContextProvider","memo","children","document","title","useCallback","Provider","value","LoaderContextProvider","useState","spin","useMemo","className","size","UserContext","userData","setUserData","UserContextProvider","useContext","history","useHistory","onSetUserData","localStorage","setItem","JSON","stringify","push","ROUTE_NAMES","PROFILE","checkAuth","user","getItem","parse","e","console","log","useEffect","ModalsContextProvider","popupAdapterOptions","setPopupAdapterOptions","LABEL_COL_FULL","xs","ROW_GUTTER","COL_RESPONSIVE_FULL","COL_RESPONSIVE_HALF","TABLE_EMPTY_MESSAGE","SELECT_SEARCH_PLACEHOLDER_DEFAULT","SELECT_PLACEHOLDER_DEFAULT","INPUT_PLACEHOLDER_DEFAULT","INPUT_NUMBER_PLACEHOLDER_DEFAULT","UPLOAD_IMAGE_PLACEHOLDER_DEFAULT","TagsType","Compose","props","components","reduceRight","acc","Comp","CheckboxControl","Group","InputPasswordControl","Password","InputControl","placeholder","calculateClass","classes","filter","el","Boolean","join","fullWidth","onChange","treeData","tagsType","selectAll","addonAfter","additionalProps","getTagLabel","find","searchLabel","handleSelectAllChange","length","map","Number","handleDeselectOption","id","tagsCloud","key","onClick","renderTagsListDeleteBtn","type","icon","IconsAdapter","iconType","tagsList","tagsListView","href","QUESTIONNAIRE_TEMPLATES_EDIT","target","rel","renderMenuItemSelectAll","getTreeData","disableCheckbox","disabled","selectClasses","defaultValue","dropdownClassName","treeNodeFilterProp","showArrow","treeCheckable","showCheckedStrategy","Cloud","List","ListView","values","restProps","String","label","dependencies","form","valueState","setValueState","triggerChanges","handleRadioGroupChange","event","startTrigger","Button","labelCol","valueCol","rowOptions","renderLevel","count","Array","fill","_","i","radios","style","width","reverse","gutter","align","TextAreaControl","dropdownClasses","handleSelectChange","number","options","TextArea","dateFormatList","date","setDate","triggerChange","resultDate","moment","format","formatDate","handleDateChange","undefined","CloneControl","name","Component","component","fieldOptions","formItemOptions","handleAddField","onAdd","handleDeleteField","field","onDelete","renderFields","fields","add","remove","index","Item","RangePicker","DatePicker","imageUrl","setImageUrl","handleChange","info","reader","FileReader","addEventListener","result","readAsDataURL","file","originFileObj","beforeUploadBanner","isJpgOrPng","message","warning","Dragger","accept","showUploadList","beforeUpload","src","alt","iconsLibrary","ArrowLeftOutlined","CheckOutlined","CloseOutlined","CopyOutlined","DeleteOutlined","DownOutlined","EditOutlined","FileAddOutlined","FilterOutlined","HomeOutlined","LogoutOutlined","MenuFoldOutlined","MenuOutlined","MenuUnfoldOutlined","MinusOutlined","PlusCircleOutlined","PlusOutlined","SearchOutlined","SettingOutlined","UserOutlined","RightOutlined","LikeOutlined","LockOutlined","FolderAddOutlined","LinkOutlined","CloseCircleOutlined","BankOutlined","DislikeOutlined","PictureOutlined","EyeOutlined","ButtonsToolbar","noMargin","justifyContent","App","locale","ru_RU","BrowserRouter","ReactDOM","render","getElementById","Header","handleRequestFinish","popupHandler","login","password","to","MAIN","preventDefault","removeItem","AuthModal","formId","buttonText","onRequestFinish","modalOptions","footer","Footer","PageContent","ContentTitle","SERVICES","SERVICES_CREATE","SERVICES_EDIT","NotFoundPage","ConfirmDeleteForm","deleteFormAction","initialValues","rowSelectionType","recordCopy","handleFinish","a","onFinish","hidden","SERVICES_MOCK","full_name","voice_docs","print_docs","comment","SERVICES_TABLE_COLUMNS","dataIndex","tableRow","havePopup","buttonOption","formOptions","okText","ServicesPage","dictionary","setDictionary","dictionaryFetch","handleDelete","err","rowKey","emptyText","columns","dataSource","pagination","haveButton","ServicesForm","Form","useForm","urlParams","useParams","initialValuesForEdit","setInitialValuesForEdit","resetFields","fetchServiceForEdit","error","htmlType","lg","labelAlign","autoSize","minRows","maxRows","Services","path","Routing","contentStyles","exact","Popups","prefix","valuePropName","PopupAdapter","getRestPopupAdapterOptions","prevState","closeModal","visible","showModal","handleCancel","okButtonProps","onCancel","destroyOnClose","onCancelSubmit"],"mappings":"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","file":"static/js/main.f11c1924.chunk.js","sourcesContent":["export class NotImplementedError extends Error {\n    constructor() {\n        super('Method Not Implemented')\n    }\n}\n","import React from 'react'\nimport { NotImplementedError } from 'core/errors'\n\nimport { DocumentTitleContextProps } from './DocumentTitleContextProps'\n\nexport const DocumentTitleContext = React.createContext<\n    DocumentTitleContextProps\n>({\n    updateTitle: (newTitle) => {\n        throw new NotImplementedError()\n    },\n})\n","import React from 'react'\n\nimport { LoaderContextProps } from './LoaderContextProps'\nimport { NotImplementedError } from '../../errors'\n\nexport const LoaderContext = React.createContext<LoaderContextProps>({\n    loaderState: false,\n    setLoaderState: (state) => {\n        throw new NotImplementedError()\n    },\n})\n","import React from 'react'\r\n\r\nimport { ModalsContextProps } from './ModalsContextProps'\r\n\r\nexport const ModalsContext = React.createContext<ModalsContextProps>(\r\n    {} as ModalsContextProps\r\n)\r\n","export * from './DocumentTitleContext'\nexport * from './DocumentTitleContextProps'\nexport * from './DocumentTitleContextProvider'\n","import React, { FC, useCallback } from 'react'\n\nimport { DocumentTitleContext } from './DocumentTitleContext'\n\nexport const DocumentTitleContextProvider: FC = React.memo(({ children }) => {\n    document.title = 'Алиса Help'\n\n    const updateTitle = useCallback(\n        (newTitle: string) => (document.title = newTitle),\n        []\n    )\n\n    return (\n        <DocumentTitleContext.Provider value={{ updateTitle }}>\n            {children}\n        </DocumentTitleContext.Provider>\n    )\n})\n","export * from './LoaderContext'\nexport * from './LoaderContextProps'\nexport * from './LoaderContextProvider'\n","import './LoaderContextProvider.scss'\n\nimport React, { FC, useMemo, useState } from 'react'\nimport { Spin } from 'antd'\n\nimport { LoaderContext } from './LoaderContext'\n\nexport const LoaderContextProvider: FC = React.memo(({ children }) => {\n    const [loaderState, setLoaderState] = useState<boolean>(false)\n    const spin = useMemo(\n        () => loaderState && <Spin className=\"glb-loader\" size=\"large\" />,\n        [loaderState]\n    )\n\n    return (\n        <LoaderContext.Provider value={{ loaderState, setLoaderState }}>\n            {spin}\n            {children}\n        </LoaderContext.Provider>\n    )\n})\n","export * from './UserContext'\nexport * from './UserContextProps'\nexport * from './UserContextProvider'\n","import React from 'react'\nimport { NotImplementedError } from 'core/errors'\n\nimport { UserContextProps } from './UserContextProps'\n\nexport const UserContext = React.createContext<UserContextProps>({\n    userData: null,\n    setUserData: (userData) => {\n        throw new NotImplementedError()\n    },\n})\n","import React, { FC, useCallback, useContext, useEffect, useState } from 'react'\n\nimport { LoaderContext, UserContext } from 'core/context'\nimport { Store } from 'rc-field-form/lib/interface'\nimport { ROUTE_NAMES } from 'routing'\nimport { useHistory } from 'react-router-dom'\n\nexport const UserContextProvider: FC = React.memo(({ children }) => {\n    const { setLoaderState } = useContext(LoaderContext)\n    const [userData, setUserData] = useState<Store | null>(null)\n    const history = useHistory()\n\n    const onSetUserData = useCallback(\n        (userData: Store | null) => {\n            setUserData(userData)\n            localStorage.setItem('userData', JSON.stringify(userData))\n            history.push(ROUTE_NAMES.PROFILE)\n        },\n        [setUserData, history]\n    )\n\n    const checkAuth = useCallback(() => {\n        if (userData) {\n            return\n        }\n\n        try {\n            setLoaderState(true)\n            const user = localStorage.getItem('userData')\n            setUserData(user ? JSON.parse(user) : null)\n        } catch (e) {\n            console.log(e)\n        } finally {\n            setLoaderState(false)\n        }\n    }, [userData, setLoaderState, setUserData])\n\n    useEffect(() => {\n        checkAuth()\n    }, [checkAuth])\n\n    return (\n        <UserContext.Provider value={{ userData, setUserData: onSetUserData }}>\n            {children}\n        </UserContext.Provider>\n    )\n})\n","export * from './ModalsContext'\r\nexport * from './ModalsContextProps'\r\nexport * from './ModalsContextProvider'\r\n","import React, { FC, useState } from 'react'\n\nimport { ModalsContext } from './ModalsContext'\nimport { ModalsOptionsProps } from '.'\n\nexport const ModalsContextProvider: FC = React.memo(({ children }) => {\n    const [popupAdapterOptions, setPopupAdapterOptions] = useState<\n        ModalsOptionsProps\n    >({})\n\n    return (\n        <ModalsContext.Provider\n            value={{ popupAdapterOptions, setPopupAdapterOptions }}\n        >\n            {children}\n        </ModalsContext.Provider>\n    )\n})\n","export const LABEL_COL_FULL = { xs: 24 }\nexport const ROW_GUTTER = 20\nexport const COL_RESPONSIVE_FULL = 24\nexport const COL_RESPONSIVE_HALF = 12","export const TABLE_EMPTY_MESSAGE = 'Нет данных'","export const SELECT_SEARCH_PLACEHOLDER_DEFAULT = 'Введите или выберите'\nexport const SELECT_PLACEHOLDER_DEFAULT = 'Выберите вариант'\nexport const INPUT_PLACEHOLDER_DEFAULT = 'Введите значение'\nexport const INPUT_NUMBER_PLACEHOLDER_DEFAULT = '0'\nexport const UPLOAD_IMAGE_PLACEHOLDER_DEFAULT = 'Добавить изображение'\n","import { TreeSelectProps } from 'antd/lib/tree-select'\nimport { ReactNode } from 'react'\n\nexport enum TagsType {\n    'Cloud' = 'Cloud',\n    'List' = 'List',\n    'ListView' = 'ListView',\n}\n\n/**\n * Интерфейс для MultiSelectControl\n * @param onChange - callback при изменении компонента\n * @param tagsType - тип вывода выбранных пунктов меню\n * @param selectAll - отображение пункта \"Выбрать все\"\n */\nexport interface MultiSelectControlProps<T> extends TreeSelectProps<T> {\n    onChange?: (value: T) => void\n    tagsType?: TagsType\n    selectAll?: boolean\n    addonAfter?: ReactNode\n}\n","import React from 'react'\r\n\r\nimport { ComposeProps } from './ComposeProps'\r\n\r\nexport const Compose = React.memo((props: ComposeProps) => {\r\n    const { components = [], children } = props\r\n\r\n    return (\r\n        <>\r\n            {components.reduceRight((acc, Comp) => {\r\n                return <Comp>{acc}</Comp>\r\n            }, children)}\r\n        </>\r\n    )\r\n})\r\n","import './CheckboxControl.scss'\r\n\r\nimport React from 'react'\r\nimport { Checkbox } from 'antd'\r\n\r\nimport { CheckboxControlProps } from './CheckboxControlProps.model'\r\n\r\n/**\r\n * Декоратор для `Checkbox` от `antd`, принимает все теже `props`\r\n */\r\nexport const CheckboxControl: React.FC<CheckboxControlProps> = React.memo(\r\n    (props) => {\r\n        return (\r\n            <div className=\"form-control checkbox-control\">\r\n                <Checkbox {...props}>{props.children}</Checkbox>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import './CheckboxControl.scss'\r\n\r\nimport React from 'react'\r\nimport { Checkbox } from 'antd'\r\n\r\nimport { CheckboxGroupControlProps } from './CheckboxControlProps.model'\r\n\r\n/**\r\n * Декоратор для `Checkbox.Group` от `antd`, принимает все теже `props`\r\n */\r\nexport const CheckboxGroupControl: React.FC<CheckboxGroupControlProps> = React.memo(\r\n    (props) => {\r\n        return (\r\n            <div className=\"checkbox-group-control\">\r\n                <Checkbox.Group {...props} />\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import './InputControl.scss'\r\n\r\nimport React from 'react'\r\nimport { Input } from 'antd'\r\n\r\nimport { InputPasswordControlProps } from './InputControlProps.model'\r\n\r\n/**\r\n * Декоратор для `Input.Password` от `antd`, принимает все теже `props`\r\n */\r\nexport const InputPasswordControl: React.FC<InputPasswordControlProps> = React.memo(\r\n    (props) => {\r\n        return (\r\n            <div className=\"input-password-control\">\r\n                <Input.Password {...props} />\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import './InputControl.scss'\n\nimport React from 'react'\nimport { INPUT_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { Input } from 'antd'\n\nimport { InputControlProps } from './InputControlProps.model'\n\n/**\n * Декоратор для `Input` от `antd`, принимает все теже `props`\n */\nexport const InputControl: React.FC<InputControlProps> = React.memo((props) => {\n    return (\n        <div className=\"form-control input-control\">\n            <Input placeholder={INPUT_PLACEHOLDER_DEFAULT} {...props} />\n        </div>\n    )\n})\n","/**\n * Вычисляет классы для элементов\n * @param classes - массив классов\n */\nexport const calculateClass = (classes: (string | undefined)[]): string => {\n    return classes.filter((el) => Boolean(el)).join(' ')\n}\n","import './InputNumberControl.scss'\n\nimport React, { useMemo } from 'react'\nimport { INPUT_NUMBER_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { InputNumber } from 'antd'\nimport { calculateClass } from 'shared/utils'\n\nimport { InputNumberControlProps } from './InputControlProps.model'\n\n/**\n * Декоратор для `InputNumber` от `antd`, принимает все теже `props`\n */\nexport const InputNumberControl: React.FC<InputNumberControlProps> = React.memo(\n    (props) => {\n        const classes = useMemo(\n            () =>\n                calculateClass([\n                    'form-control',\n                    'input-number-control',\n                    props.fullWidth ? 'input-number-control_full-width' : '',\n                ]),\n            [props.fullWidth]\n        )\n\n        return (\n            <div className={classes}>\n                <InputNumber\n                    placeholder={INPUT_NUMBER_PLACEHOLDER_DEFAULT}\n                    {...props}\n                />\n            </div>\n        )\n    }\n)\n","import './MultiSelectControl.sass'\n\nimport React, { useCallback, useMemo } from 'react'\nimport { Button, TreeSelect } from 'antd'\nimport { DataNode } from 'rc-tree-select/lib/interface.d'\nimport { IconsAdapter } from 'shared/components'\nimport { ROUTE_NAMES } from 'routing'\nimport { SELECT_SEARCH_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { calculateClass } from 'shared/utils'\n\nimport {\n    MultiSelectControlProps,\n    TagsType,\n} from './MultiSelectControlProps.model'\n\n/**\n * Декоратор для `TreeSelect` от `antd`\n * Использовать в случае, если нужен множественный выбор.\n */\nexport const MultiSelectControl: React.FC<MultiSelectControlProps<\n    number[]\n    >> = React.memo((props) => {\n    const {\n        onChange,\n        value,\n        treeData = [],\n        tagsType,\n        placeholder,\n        selectAll,\n        addonAfter,\n        ...additionalProps\n    } = props\n\n    /**\n     * Функция возвращает label\n     * @param value - значение по которому необходимо найти label\n     */\n    const getTagLabel = useCallback(\n        (value: number) => {\n            const searchLabel = (el: DataNode): unknown =>\n                el.value === value || el.children?.find(searchLabel)\n\n            return treeData?.find(searchLabel)?.title\n        },\n        [treeData]\n    )\n\n    /**\n     * Обработчик пункта \"Выбрать все/снять выделение\" в TreeSelect\n     */\n    const handleSelectAllChange = useCallback(() => {\n        if (onChange) {\n            value?.length\n                ? onChange([])\n                : onChange(\n                treeData?.map((el) => Number(el.value)).filter(Boolean)\n                )\n        }\n    }, [value, treeData, onChange])\n\n    /**\n     * Обработчик для удаления выбранного пункта меню\n     * @param id - id удаляемого пункта меню\n     */\n    const handleDeselectOption = useCallback(\n        (id: number) => {\n            if (onChange && value) {\n                onChange(value.filter((el) => el !== id))\n            }\n        },\n        [value, onChange]\n    )\n\n    /**\n     * Рендер списка выбранных пунктов меню для типа \"Cloud\"\n     */\n    const tagsCloud = useMemo(() => {\n        return value?.map((el: number) => (\n            <span\n                className=\"multi-select-tags__item\"\n                key={el}\n                onClick={() => handleDeselectOption(el)}\n            >\n                <span>{getTagLabel(el)}</span>\n                <i />\n            </span>\n        ))\n    }, [getTagLabel, handleDeselectOption, value])\n\n    /**\n     * Кнопка удаление выбранного пункта из списка\n     * @param id - номер пункта\n     */\n    const renderTagsListDeleteBtn = useCallback(\n        (id: number) => (\n            <Button\n                type=\"link\"\n                icon={\n                    <IconsAdapter\n                        iconType=\"CloseOutlined\"\n                        className=\"multi-select-list__btn-deselect\"\n                    />\n                }\n                onClick={() => handleDeselectOption(id)}\n            />\n        ),\n        [handleDeselectOption]\n    )\n\n    /**\n     * Рендер списка выбранных пунктов меню для типа \"List\"\n     */\n    const tagsList = useMemo(\n        () =>\n            value?.map((el) => {\n                return (\n                    <div key={el} className=\"multi-select-list__item\">\n                        <div>{getTagLabel(el)}</div>\n                        {renderTagsListDeleteBtn(el)}\n                    </div>\n                )\n            }),\n        [value, getTagLabel, renderTagsListDeleteBtn]\n    )\n\n    /**\n     * Рендер списка выбранных пунктов меню для типа \"ListView\"\n     */\n    const tagsListView = useMemo(\n        () =>\n            value?.map((el) => {\n                return (\n                    <div key={el} className=\"multi-select-list__item\">\n                        <div>{getTagLabel(el)}</div>\n                        <div>\n                            {renderTagsListDeleteBtn(el)}\n                            <a\n                                href={`${ROUTE_NAMES.QUESTIONNAIRE_TEMPLATES_EDIT}/${el}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <IconsAdapter iconType=\"EyeOutlined\" />\n                            </a>\n                        </div>\n                    </div>\n                )\n            }),\n        [value, getTagLabel, renderTagsListDeleteBtn]\n    )\n\n    /**\n     * Рендер пункта \"Выбрать все/снять выделение\"\n     */\n    const renderMenuItemSelectAll = useMemo(() => {\n        return (\n            <span className=\"select-all-option\" onClick={handleSelectAllChange}>\n                {value?.length ? 'Снять выделение' : 'Выбрать все'}\n            </span>\n        )\n    }, [value, handleSelectAllChange])\n\n    /**\n     * Возвращает дерево данных для селекта в зависимости от флага selectAll\n     * @param selectAll - определяет наличие пункта \"Выбрать все\" в дереве данных\n     * @return\n     */\n    const getTreeData = useCallback(\n        (selectAll?: boolean) => {\n            if (selectAll)\n                return [\n                    {\n                        title: renderMenuItemSelectAll,\n                        disableCheckbox: true,\n                        disabled: true,\n                        key: 'all',\n                    },\n                    ...treeData,\n                ]\n\n            return treeData\n        },\n        [renderMenuItemSelectAll, treeData]\n    )\n\n    const selectClasses = useMemo(\n        () =>\n            calculateClass([\n                'form-control',\n                'multi-select-control',\n                tagsType ? 'multi-select-control_has-tags-cloud' : '',\n            ]),\n        [tagsType]\n    )\n\n    return (\n        <div className={selectClasses}>\n            <div className={addonAfter ? 'multi-select-addon-after' : ''}>\n                <TreeSelect\n                    defaultValue={value}\n                    dropdownClassName={calculateClass([\n                        'multi-select-control__dropdown',\n                        selectAll\n                            ? 'multi-select-control__dropdown_select-all'\n                            : '',\n                    ])}\n                    treeNodeFilterProp=\"title\"\n                    treeData={getTreeData(selectAll)}\n                    showArrow={true}\n                    onChange={onChange}\n                    value={value}\n                    placeholder={\n                        tagsType\n                            ? ''\n                            : placeholder || SELECT_SEARCH_PLACEHOLDER_DEFAULT\n                    }\n                    treeCheckable={true}\n                    showCheckedStrategy=\"SHOW_PARENT\"\n                    {...additionalProps}\n                />\n                {addonAfter && (\n                    <div className=\"addon-after-content\">{addonAfter}</div>\n                )}\n            </div>\n            {tagsCloud && tagsType === TagsType.Cloud && (\n                <div className=\"multi-select-tags\">{tagsCloud}</div>\n            )}\n            {tagsList && tagsType === TagsType.List && (\n                <div className=\"multi-select-list\">{tagsList}</div>\n            )}\n            {tagsListView && tagsType === TagsType.ListView && (\n                <div className=\"multi-select-list-view\">{tagsListView}</div>\n            )}\n        </div>\n    )\n})\n","import './RadioControl.scss'\n\nimport React from 'react'\nimport { Radio } from 'antd'\n\nimport { RadioControlProps } from './RadioControl.model'\n\n/**\n * Декоратор для `RadioGroup` от `antd`, принимает все теже `props`\n */\nexport const RadioControl: React.FC<RadioControlProps> = React.memo((props) => {\n    const { values = [], ...restProps } = props\n\n    return (\n        <div className=\"form-control radio-control\">\n            <Radio.Group {...restProps}>\n                {values.map((el) => (\n                    <Radio key={String(el.key)} value={el.value}>\n                        {el.label}\n                    </Radio>\n                ))}\n            </Radio.Group>\n        </div>\n    )\n})\n","import './RadioButtonControl.scss'\n\nimport React, { ReactText, useCallback, useState } from 'react'\nimport { Radio } from 'antd'\n\nimport { RadioButtonControlProps } from './RadioButtonControl.model'\n\n/**\n * Декоратор для `RadioGroup` от `antd`\n */\nexport const RadioButtonControl: React.FC<RadioButtonControlProps> = React.memo(\n    (props) => {\n        const {\n            values = [],\n            dependencies,\n            value,\n            onChange,\n            form,\n            ...restProps\n        } = props\n\n        const [valueState, setValueState] = useState<ReactText>()\n\n        /**\n         * Обновить значение в стейте и внешней форме\n         */\n        const triggerChanges = useCallback(\n            (value: ReactText) => {\n                setValueState(value)\n                if (onChange) onChange(value)\n            },\n            [onChange]\n        )\n\n        /**\n         * Обработчик изменения значения RadioGroup\n         */\n        const handleRadioGroupChange = useCallback(\n            (event) => {\n\n                const startTrigger = () => {\n                    if (event?.target?.value) {\n                        triggerChanges(event.target.value)\n                    }\n                }\n\n                startTrigger()\n            },\n            [triggerChanges]\n        )\n\n        return (\n            <div className=\"form-control radio-button-control\">\n                <Radio.Group\n                    onChange={handleRadioGroupChange}\n                    value={value || valueState}\n                    {...restProps}\n                >\n                    {values.map((el) => (\n                        <Radio.Button key={String(el.key)} value={el.value}>\n                            {el.label}\n                        </Radio.Button>\n                    ))}\n                </Radio.Group>\n            </div>\n        )\n    }\n)\n","import './RadioLevelControl.scss'\n\nimport React, { useCallback, useMemo } from 'react'\nimport { Col, Radio, Row } from 'antd'\n\nimport { RadioControlProps } from './RadioControl.model'\n\n/**\n * Декоратор для `RadioGroup` от `antd`, принимает все теже `props`\n */\nexport const RadioLevelControl: React.FC<RadioControlProps> = React.memo(\n    (props) => {\n        const {\n            values = [],\n            label,\n            labelCol = { xs: 8 },\n            valueCol = { xs: 16 },\n            rowOptions,\n            ...restProps\n        } = props\n\n        const renderLevel = useCallback(\n            (count: number) =>\n                new Array(count).fill('').map((_, i) => <span key={i} />),\n            []\n        )\n\n        const radios = useMemo(() => {\n            return values\n                .map((el) => (\n                    <Radio\n                        key={String(el.key)}\n                        value={el.value}\n                        className=\"radio-level-control__level\"\n                        style={{\n                            width: `calc(100% / ${values.length} * ${Number(\n                                el.value\n                            )})`,\n                        }}\n                    >\n                        <div className=\"radio-level-control__grid\">\n                            {renderLevel(Number(el.value))}\n                        </div>\n                        <div\n                            className=\"radio-level-control__label\"\n                            style={{\n                                width: `calc(100% / ${Number(el.value)})`,\n                            }}\n                        >\n                            {el.label}\n                        </div>\n                    </Radio>\n                ))\n                .reverse()\n        }, [renderLevel, values])\n\n        // @ts-ignore\n        return (\n            <div className=\"form-control radio-level-control\">\n                <Row gutter={20} align=\"middle\" {...rowOptions}>\n                    <Col {...valueCol}>\n                        <Radio.Group {...restProps}>{radios}</Radio.Group>\n                    </Col>\n                    <Col {...labelCol}>\n                        {label && (\n                            <div className=\"radio-level-control__group-label\">\n                                {label}\n                            </div>\n                        )}\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n)\n","import './TextAreaControl.scss'\n\nimport React from 'react'\nimport { INPUT_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { Input } from 'antd'\n\nimport { TextAreaControlProps } from './TextAreaControlProps.model'\n\n/**\n * Декоратор для `TextArea` от `antd`, принимает все теже `props`\n */\nexport const TextAreaControl: React.FC<TextAreaControlProps> = React.memo(\n    (props) => {\n        return (\n            <div className=\"form-control textarea-control\">\n                <Input.TextArea\n                    placeholder={INPUT_PLACEHOLDER_DEFAULT}\n                    {...props}\n                />\n            </div>\n        )\n    }\n)\n","import './SelectControl.scss'\n\nimport React, { useCallback, useState } from 'react'\nimport { LabeledValue } from 'antd/lib/select'\nimport { SELECT_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { Select } from 'antd'\nimport { calculateClass } from 'shared/utils'\n\nimport { SelectControlProps } from './SelectControlProps.model'\n\n/**\n * Декоратор для `Select` от `antd`\n */\nexport const SelectControl: React.FC<SelectControlProps<\n    number | LabeledValue\n>> = React.memo((props) => {\n    const {\n        values = [],\n        dropdownClassName,\n        dependencies,\n        value,\n        onChange,\n        form,\n        ...restProps\n    } = props\n    const dropdownClasses = calculateClass([\n        'select-control__dropdown',\n        dropdownClassName ? dropdownClassName : '',\n    ])\n\n    const [valueState, setValueState] = useState<number>()\n\n    /**\n     * Обновить значение в стейте и внешней форме\n     */\n    const triggerChanges = useCallback(\n        (value: number) => {\n            setValueState(value)\n            if (onChange) onChange(value)\n        },\n        [onChange]\n    )\n\n    /**\n     * Обработчик изменения значения Select\n     */\n    const handleSelectChange = useCallback(\n        (number) => {\n\n            const startTrigger = () => {\n                triggerChanges(number)\n            }\n\n            startTrigger()\n        },\n        [triggerChanges]\n    )\n\n    return (\n        <div className=\"form-control select-control\">\n            <Select\n                value={value || valueState}\n                onChange={handleSelectChange}\n                placeholder={SELECT_PLACEHOLDER_DEFAULT}\n                {...restProps}\n                dropdownClassName={dropdownClasses}\n                options={values}\n            />\n        </div>\n    )\n})\n","export const dateFormatList = ['DD/MM/YYYY', 'DD/MM/YY']\n","import './DatePickerControl.scss'\n\nimport React, { useCallback, useState } from 'react'\nimport moment, { Moment } from 'moment'\nimport { DatePicker } from 'antd'\nimport { formatDate } from 'shared/utils'\n\nimport { DatePickerControlProps } from './DatePickerControlProps.model'\nimport { dateFormatList } from './consts'\n\n/**\n * Декоратор для `DatePicker` от `antd`\n */\nexport const DatePickerControl: React.FC<DatePickerControlProps> = React.memo(\n    ({ value, onChange }) => {\n        const [date, setDate] = useState<Moment | null>()\n\n        const triggerChange = useCallback(\n            (value: Moment | null) => {\n                const resultDate = formatDate(value)\n\n                if (onChange) onChange(resultDate)\n            },\n            [onChange]\n        )\n\n        const handleDateChange = useCallback(\n            (value: Moment | null) => {\n                setDate(value)\n                triggerChange(value)\n            },\n            [triggerChange]\n        )\n\n        return (\n            <div className=\"form-control date-picker-control\">\n                <DatePicker\n                    format={dateFormatList}\n                    onChange={handleDateChange}\n                    value={(value && moment(value)) || date}\n                />\n            </div>\n        )\n    }\n)\n","import moment, { Moment } from 'moment'\nimport { DataNode } from 'rc-tree-select/lib/interface'\n\ninterface NormalizeDataForTreeSelectProps {\n    [key: string]: any\n}\n\n/**\n * Форматирование даты для отправки на бэк\n * @param date дата в формате Moment\n */\nexport const formatDate = (date?: Moment | string | null) => {\n    if (date) return moment(date).format('L')\n\n    return undefined\n}\n\n/**\n * Нормализация данных, для вывода в TreeSelectControl\n * @param el - очередная запись итерации\n */\nexport const normalizeDataForTreeSelect = (\n    el: NormalizeDataForTreeSelectProps\n): DataNode => {\n    if (el.units?.length) {\n        return {\n            value: el.id,\n            title: el.title,\n            children: el.units.map(normalizeDataForTreeSelect),\n            key: el.id,\n        }\n    }\n\n    return {\n        value: el.id,\n        title: el.title,\n        key: el.id,\n    }\n}","import './TreeSelectControl.scss'\n\nimport React from 'react'\nimport { SELECT_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { TreeSelect } from 'antd'\n\nimport { TreeSelectControlProps } from './TreeSelectControlProps.model'\n\n/**\n * Декоратор для `TreeSelect` от `antd`, принимает все теже `props`\n */\nexport const TreeSelectControl: React.FC<TreeSelectControlProps<\n    number[]\n>> = React.memo((props) => {\n    return (\n        <div className=\"form-control tree-select-control\">\n            <TreeSelect\n                placeholder={SELECT_PLACEHOLDER_DEFAULT}\n                dropdownClassName=\"tree-select-control__dropdown\"\n                treeNodeFilterProp=\"title\"\n                {...props}\n            />\n        </div>\n    )\n})\n","import './SwitchControl.scss'\r\n\r\nimport React from 'react'\r\nimport { Switch } from 'antd'\r\n\r\nimport { SwitchControlProps } from './SwitchControl.model'\r\n\r\n/**\r\n * Декоратор для `Switch` от `antd`, принимает все теже `props`\r\n */\r\nexport const SwitchControl: React.FC<SwitchControlProps> = React.memo(\r\n    (props) => {\r\n        return (\r\n            <div className=\"form-control switch-control\">\r\n                <Switch {...props} />\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import './ControlGroup.scss'\n\nimport React from 'react'\n\nimport { ControlGroupProps } from './ControlGroup.model'\n\n/**\n * Группировка для контролов\n */\nexport const ControlGroup: React.FC<ControlGroupProps> = React.memo(\n    ({ children, type, className, title }) => {\n        const classes = [\n            'control-group',\n            type ? 'control-group_' + type : undefined,\n            className,\n        ]\n\n        return (\n            <div className={classes.join(' ')}>\n                {title && <h4>{title}</h4>}\n                {children}\n            </div>\n        )\n    }\n)\n","import './CloneControl.scss'\r\n\r\nimport React, { useCallback } from 'react'\r\nimport { Button, Form } from 'antd'\r\nimport { IconsAdapter } from 'shared/components'\r\n\r\nimport {\r\n    CloneControlProps,\r\n    ComponentProps,\r\n    RenderFieldsType,\r\n} from './CloneControl.model'\r\n\r\n/**\r\n * Компонент для клонирования других компонентов контролов\r\n */\r\nexport const CloneControl = <T extends ComponentProps>({\r\n    name,\r\n    component: Component,\r\n    fieldOptions,\r\n    formItemOptions,\r\n}: CloneControlProps<T>) => {\r\n    /**\r\n     * Обработчик добавления полня\r\n     */\r\n    const handleAddField = useCallback(\r\n        (onAdd) => () => {\r\n            onAdd()\r\n        },\r\n        []\r\n    )\r\n\r\n    /**\r\n     * Обработчик удаления полня\r\n     */\r\n    const handleDeleteField = useCallback(\r\n        (field, onDelete) => () => {\r\n            onDelete(field)\r\n        },\r\n        []\r\n    )\r\n\r\n    /**\r\n     * Рендер полей\r\n     * @param fields - массив полей\r\n     * @param operation - методы для работы с полями, добавление, удаление и т.д.\r\n     */\r\n    const renderFields: RenderFieldsType = useCallback(\r\n        (fields, { add, remove }) => {\r\n            return (\r\n                <>\r\n                    {fields.map((field, index) => (\r\n                        <Form.Item\r\n                            {...formItemOptions}\r\n                            key={field.key}\r\n                            className=\"clone-control__row\"\r\n                        >\r\n                            <Form.Item {...field}>\r\n                                <Component {...fieldOptions} />\r\n                            </Form.Item>\r\n\r\n                            <IconsAdapter\r\n                                iconType=\"CloseOutlined\"\r\n                                onClick={handleDeleteField(field.name, remove)}\r\n                            />\r\n                        </Form.Item>\r\n                    ))}\r\n\r\n                    <Button\r\n                        type=\"link\"\r\n                        icon={<IconsAdapter iconType=\"PlusCircleOutlined\" />}\r\n                        className=\"clone-control__add\"\r\n                        onClick={handleAddField(add)}\r\n                    >\r\n                        Добавить\r\n                    </Button>\r\n                </>\r\n            )\r\n        },\r\n        [fieldOptions, formItemOptions, handleAddField, handleDeleteField]\r\n    )\r\n\r\n    return (\r\n        <div className=\"form-control clone-control\">\r\n            <Form.List name={name}>{renderFields}</Form.List>\r\n        </div>\r\n    )\r\n}\r\n","export const dateFormatList = ['DD/MM/YYYY', 'DD/MM/YY']\n","import './RangePickerControl.scss'\n\nimport React from 'react'\nimport { DatePicker } from 'antd'\n\nimport { RangePickerControlProps } from './RangePickerControlProps.model'\nimport { dateFormatList } from './consts'\n\nconst { RangePicker } = DatePicker\n\n/**\n * Декоратор для `RangePicker` от `antd`, принимает все теже `props`\n */\nexport const RangePickerControl: React.FC<RangePickerControlProps> = React.memo(\n    (props) => {\n        return (\n            <div className=\"form-control range-picker-control\">\n                <RangePicker\n                    format={dateFormatList}\n                    placeholder={['с', 'по']}\n                    {...props}\n                />\n            </div>\n        )\n    }\n)\n","import './UploadDraggerImageControl.scss'\n\nimport React, { useCallback, useState } from 'react'\nimport { IconsAdapter } from 'shared/components'\nimport { RcFile, UploadChangeParam } from 'antd/lib/upload/interface'\nimport { UPLOAD_IMAGE_PLACEHOLDER_DEFAULT } from 'shared/consts'\nimport { message, Upload } from 'antd'\n\nimport { UploadDraggerImageControlProps } from './UploadDraggerImageControl.model'\n\n/**\n * Декоратор для `Upload.Dragger` от `antd`, принимает все теже `props`\n */\nexport const UploadDraggerImageControl: React.FC<UploadDraggerImageControlProps> = React.memo(\n    ({ placeholder, onChange, ...restProps }) => {\n        const [imageUrl, setImageUrl] = useState<string | ArrayBuffer | null>(\n            null\n        )\n\n        /**\n         * Превью загружаемого изображения\n         * @param info информация о изображении\n         */\n        const handleChange = useCallback(\n            (info: UploadChangeParam) => {\n                const reader = new FileReader()\n                reader.addEventListener('load', () => {\n                    setImageUrl(reader.result)\n                })\n                reader.readAsDataURL(info.file.originFileObj as Blob)\n                if (onChange) onChange(info)\n            },\n            [onChange]\n        )\n\n        /**\n         * Валидация загружаемого баннера\n         * @param file добавляемый файл\n         */\n        const beforeUploadBanner = useCallback((file: RcFile) => {\n            const isJpgOrPng =\n                file.type === 'image/jpeg' || file.type === 'image/png'\n            if (!isJpgOrPng)\n                message.warning(\n                    'Вы можете загрузить только JPG/PNG файлы!'\n                )\n            return isJpgOrPng\n        }, [])\n\n        return (\n            <div className=\"upload-dragger-control\">\n                <Upload.Dragger\n                    accept=\"image/*\"\n                    showUploadList={false}\n                    beforeUpload={beforeUploadBanner}\n                    onChange={handleChange}\n                    {...restProps}\n                >\n                    {imageUrl ? (\n                        <img\n                            src={imageUrl as string}\n                            alt=\"Изображение\"\n                            style={{ width: '100%' }}\n                        />\n                    ) : (\n                        <>\n                            <IconsAdapter\n                                iconType=\"PictureOutlined\"\n                                className=\"img-upload\"\n                            />\n                            <span>\n                                {placeholder ||\n                                    UPLOAD_IMAGE_PLACEHOLDER_DEFAULT}\n                            </span>\n                        </>\n                    )}\n                </Upload.Dragger>\n            </div>\n        )\n    }\n)\n","import React from 'react'\nimport {\n    ArrowLeftOutlined,\n    CheckOutlined,\n    CloseOutlined,\n    CopyOutlined,\n    DeleteOutlined,\n    DownOutlined,\n    EditOutlined,\n    FileAddOutlined,\n    FilterOutlined,\n    HomeOutlined,\n    LogoutOutlined,\n    MenuFoldOutlined,\n    MenuOutlined,\n    MenuUnfoldOutlined,\n    MinusOutlined,\n    PlusCircleOutlined,\n    PlusOutlined,\n    SearchOutlined,\n    SettingOutlined,\n    UserOutlined,\n    RightOutlined,\n    LikeOutlined,\n    LockOutlined,\n    FolderAddOutlined,\n    LinkOutlined,\n    CloseCircleOutlined,\n    BankOutlined,\n    DislikeOutlined,\n    PictureOutlined,\n    EyeOutlined\n} from '@ant-design/icons'\n\nimport { IconsAdapterProps } from './IconsAdapter.model'\n\n/**\n * Адаптер для `Icons` от `antd`, принимает все теже `props`.\n * iconType влияет на тип выводимой иконки.\n */\n\nexport const IconsAdapter: React.FC<IconsAdapterProps> = React.memo(\n    ({ iconType, ...restProps }) => {\n        const iconsLibrary = {\n            ArrowLeftOutlined: <ArrowLeftOutlined {...restProps} />,\n            CheckOutlined: <CheckOutlined {...restProps} />,\n            CloseOutlined: <CloseOutlined {...restProps} />,\n            CopyOutlined: <CopyOutlined {...restProps} />,\n            DeleteOutlined: <DeleteOutlined {...restProps} />,\n            DownOutlined: <DownOutlined {...restProps} />,\n            EditOutlined: <EditOutlined {...restProps} />,\n            FileAddOutlined: <FileAddOutlined {...restProps} />,\n            FilterOutlined: <FilterOutlined {...restProps} />,\n            HomeOutlined: <HomeOutlined {...restProps} />,\n            LogoutOutlined: <LogoutOutlined {...restProps} />,\n            MenuFoldOutlined: <MenuFoldOutlined {...restProps} />,\n            MenuOutlined: <MenuOutlined {...restProps} />,\n            MenuUnfoldOutlined: <MenuUnfoldOutlined {...restProps} />,\n            MinusOutlined: <MinusOutlined {...restProps} />,\n            PlusCircleOutlined: <PlusCircleOutlined {...restProps} />,\n            PlusOutlined: <PlusOutlined {...restProps} />,\n            SearchOutlined: <SearchOutlined {...restProps} />,\n            SettingOutlined: <SettingOutlined {...restProps} />,\n            UserOutlined: <UserOutlined {...restProps} />,\n            RightOutlined: <RightOutlined {...restProps} />,\n            LikeOutlined: <LikeOutlined {...restProps} />,\n            LockOutlined: <LockOutlined {...restProps} />,\n            FolderAddOutlined: <FolderAddOutlined {...restProps} />,\n            LinkOutlined: <LinkOutlined {...restProps} />,\n            CloseCircleOutlined: <CloseCircleOutlined {...restProps} />,\n            BankOutlined: <BankOutlined {...restProps} />,\n            DislikeOutlined: <DislikeOutlined {...restProps} />,\n            PictureOutlined: <PictureOutlined {...restProps} />,\n            EyeOutlined: <EyeOutlined {...restProps} />,\n        }\n\n        return <>{iconType ? iconsLibrary[iconType] : ''}</>\n    }\n)\n","import './ButtonsToolbar.scss'\n\nimport React from 'react'\nimport { calculateClass } from 'shared/utils'\n\nimport { ButtonsToolbarProps } from './ButtonsToolbar.model'\n\n/**\n * Панель инструментов, группировка для кнопок\n */\n\nexport const ButtonsToolbar: React.FC<ButtonsToolbarProps> = React.memo(\n    ({ children, align = 'flex-end', className, noMargin }) => {\n        const classes = calculateClass([\n            'buttons-toolbar',\n            className,\n            noMargin ? 'buttons-toolbar_no-margin' : undefined,\n        ])\n\n        return (\n            <div className={classes} style={{ justifyContent: align }}>\n                {children}\n            </div>\n        )\n    }\n)\n","export * from './DocumentTitle'\nexport * from './Loader'\nexport * from './User'\nexport * from './Modals'\n","import React  from 'react'\nimport { ConfigProvider } from 'antd'\nimport ru_RU from 'antd/es/locale/ru_RU'\nimport './App.sass'\nimport { Header, Footer } from 'core/components'\nimport { Compose } from 'shared/components'\nimport { Routing } from 'routing'\nimport { DocumentTitleContextProvider, LoaderContextProvider, UserContextProvider, ModalsContextProvider } from 'core/context'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Popups } from 'shared/popups'\n\nexport const App: React.FC = () => {\n    return <div className=\"app\">\n        <ConfigProvider locale={ru_RU}>\n            <Compose\n                components={[\n                    BrowserRouter,\n                    LoaderContextProvider,\n                    UserContextProvider,\n                    DocumentTitleContextProvider,\n                    ModalsContextProvider\n                ]}\n            >\n                <Header/>\n\n                <Routing />\n\n                <Footer/>\n\n                <Popups/>\n            </Compose>\n        </ConfigProvider>\n    </div>\n}","import 'antd/dist/antd.css'\nimport './index.sass'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\n\nReactDOM.render(<App/>, document.getElementById('root'))","import './Header.sass'\n\nimport React, { FC, useCallback, useContext, useState } from 'react'\nimport { LoaderContext } from 'core/context'\nimport { useHistory } from 'react-router-dom'\n//import { MainMenu } from './components'\nimport { Button } from 'antd'\nimport { ROUTE_NAMES } from 'routing'\nimport { Link } from 'react-router-dom'\nimport { PopupAdapter, AuthModal } from 'shared/popups'\nimport { Store } from 'rc-field-form/lib/interface'\n\nexport const Header: FC = React.memo(() => {\n    const [ userData, setUserData ] = useState(false)\n    const { setLoaderState } = useContext(LoaderContext)\n    const history = useHistory()\n\n    const handleRequestFinish = useCallback((popupHandler: () => void) => (values: Store) => {\n        try {\n            setLoaderState(true)\n            if (values.login === 'admin' && values.password === 'admin') {\n                popupHandler()\n                            setUserData(true)\n                            history.push(ROUTE_NAMES.PROFILE)\n            }\n        } finally {\n            setLoaderState(false)\n        }\n    }, [setUserData, history, setLoaderState])\n\n    const handleLogout = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        e.preventDefault()\n        localStorage.removeItem('userData')\n        setUserData(false)\n    }\n\n    return (\n        <header className=\"header\">\n            <Link to={ROUTE_NAMES.MAIN}>\n                <h1><i>Алиса Help</i></h1>\n            </Link>\n            <div className=\"header__menu-wrapper\">\n                {/*<MainMenu/>*/}\n                {userData ? <Button onClick={handleLogout}>ВЫХОД</Button> : <PopupAdapter\n                    component={AuthModal}\n                    formId=\"authForm\"\n                    buttonText=\"ВХОД\"\n                    onRequestFinish={handleRequestFinish}\n                    modalOptions={{footer: null }}\n                />}\n            </div>\n        </header>\n    )\n})\n","import './Footer.sass'\n\nimport React, { FC } from 'react'\n\n\nexport const Footer: FC = React.memo(() => {\n    return (\n        <footer className=\"footer\">\n            <div>2020 <span>(c) Пресвятой Ctrl + Z</span></div>\n        </footer>\n    )\n})\n","import './PageContent.sass'\n\nimport React from 'react'\n\nimport { PageContentProps } from './PageContent.model'\n\nexport const PageContent: React.FC<PageContentProps> = React.memo(\n    ({ children, className }) => (\n        <section className={`page-content${className ? ' ' + className : ''}`}>\n            {children}\n        </section>\n    )\n)\n","import './ContentTitle.scss'\n\nimport React from 'react'\n\nimport { ContentTitleProps } from './ContentTitle.model'\n\nexport const ContentTitle: React.FC<ContentTitleProps> = React.memo(\n    ({ children, className, title }) => (\n        <div className={`content-title${className ? ' ' + className : ''}`}>\n            <h1>{title}</h1>\n            {children}\n        </div>\n    )\n)\n","import { RouteNamesProps } from './Routing.model'\n\nconst MAIN = 'lsd2020'\nconst SERVICES = 'services'\nconst SERVICES_CREATE = 'services-create'\nconst SERVICES_EDIT = 'services-edit'\n\nexport const ROUTE_NAMES: RouteNamesProps = {\n    /** Главная страница */\n    MAIN: `/${MAIN}`,\n\n    /** Таблица услуг */\n    SERVICES: `/${MAIN}/${SERVICES}`,\n    /** Таблица услуг: создание услуги */\n    SERVICES_CREATE: `/${MAIN}/${SERVICES}/${SERVICES_CREATE}`,\n    /** Таблица услуг: редактирование услуги */\n    SERVICES_EDIT: `/${MAIN}/${SERVICES}/${SERVICES_EDIT}`,\n}","import './NotFoundPage.scss'\n\nimport React, { FC } from 'react'\nimport { Link } from 'react-router-dom'\nimport { PageContent } from 'core/components'\nimport { ROUTE_NAMES } from 'routing'\n\nexport const NotFoundPage: FC = React.memo(() => {\n    return (\n        <PageContent className=\"not-found\">\n            <h1>По Вашему запросу ничего не найдено</h1>\n            <h3>\n                Вы можете перейти на <Link to={ROUTE_NAMES.MAIN}>Главную</Link>\n            </h3>\n        </PageContent>\n    )\n})\n","import React, { FC, useCallback, useContext } from 'react'\nimport { Form } from 'antd'\nimport { InputControl } from 'shared/components'\nimport { LoaderContext } from 'core/context'\nimport { PopupAdapterFormProps } from 'shared/popups/PopupAdapter.model'\n\n/** Универсальная форма для удаления записи */\nexport const ConfirmDeleteForm: FC<PopupAdapterFormProps> = React.memo(\n    ({\n        onRequestFinish = () => {},\n        deleteFormAction = () => {},\n        initialValues,\n        rowSelectionType,\n        recordCopy,\n        ...props\n    }) => {\n        const { setLoaderState } = useContext(LoaderContext)\n\n        const handleFinish = useCallback(\n            async (values: { id?: number }) => {\n                try {\n                    setLoaderState(true)\n\n                    await deleteFormAction(values.id as number)\n\n                    onRequestFinish()\n                } catch (err) {\n                    onRequestFinish(err)\n                } finally {\n                    setLoaderState(false)\n                }\n            },\n            [deleteFormAction, onRequestFinish, setLoaderState]\n        )\n\n        return (\n            <Form\n                onFinish={handleFinish}\n                {...props}\n                initialValues={initialValues}\n            >\n                Уверены, что хотите удалить?\n                <Form.Item name=\"id\">\n                    <InputControl hidden />\n                </Form.Item>\n            </Form>\n        )\n    }\n)\n","export const SERVICES_MOCK = [\r\n    {\r\n        id: 101,\r\n        full_name: 'Ежемесячное пособие на ребенка из малообеспеченных семей родители которых уклоняются от уплаты алиментов',\r\n        name: ['Ежемесячное пособие на ребенка', 'Пособие на детей матерям-одиночкам', 'Ежемесячное пособие на ребенка из малообеспеченных семей родители которых уклоняются от уплаты алиментов', 'Пособие на ребенка с родителем, не платящим алименты'],\r\n        voice_docs: ['Заявление', 'Информация о доходах семьи', 'Копия решения суда о взыскании алиментов либо исполнительного листа', 'Паспорт', 'Свидетельство о рождении ребенка', 'Справка об обучении в ОУ ребенка старше 16 лет', 'Справка с места жительства'],\r\n        print_docs: [\r\n            'Заявление', 'Информация о доходах семьи - ежегодно', 'Копия решения суда о взыскании алиментов либо исполнительного листа', 'Паспорт (или иной документ, удостоверяющий личность)', 'Свидетельство о рождении ребенка', 'Справка об обучении в ОУ ребенка старше 16 лет', 'Справка с места жительства ребенка о совместном его проживании с родителем (усыновителем, опекуном, попечителем) '\r\n\r\n        ],\r\n        to: 'ГКУ СО «ГУСЗН Самарского округа», районные подразделения',\r\n        comment:\r\n            'Прочие документы запрашиваются органами соцзащиты самостоятельно. Заявление можно заполнить по ссылке https://suprema63.ru/msdr/portal/social/privileges/questionnaire/show.do?qId=133586264&categoryId=123336&pconditionId=139845&groupId=121247'\r\n    },\r\n    {\r\n        id: 102,\r\n        full_name: 'Ежемесячное пособие на ребенка из малообеспеченных семей одиноких матерей',\r\n        name: ['Ежемесячное пособие на ребенка', 'Пособие на детей матерям-одиночкам', 'Ежемесячное пособие на ребенка из малообеспеченных семей одиноких матерей', 'Пособие для детей в неполных семьях'],\r\n        voice_docs: ['Заявление', 'Информация о доходах семьи', 'Паспорт', 'Свидетельство о рождении ребенка', 'Справка об обучении в ОУ ребенка старше 16 лет', 'Справка с места жительства'],\r\n        print_docs: ['Заявление', 'Информация о доходах семьи - ежегодно', 'Паспорт (или иной документ, удостоверяющий личность)', 'Свидетельство о рождении ребенка', 'Справка об обучении в ОУ ребенка старше 16 лет', 'Справка с места жительства ребенка о совместном его проживании с родителем (усыновителем, опекуном, попечителем) '],\r\n        to: 'ГКУ СО «ГУСЗН Самарского округа», районные подразделения',\r\n        comment:\r\n            'Прочие документы запрашиваются органами соцзащиты самостоятельно. Заявление можно заполнить по ссылке https://suprema63.ru/msdr/portal/social/privileges/questionnaire/show.do?qId=133586264&categoryId=123528&pconditionId=399725580&groupId=121247'\r\n    },\r\n    {\r\n        id: 103,\r\n        full_name: 'Ежемесячное пособие на детей в возрасте от 1,5 до 3 лет, не посещающих дошкольную образовательную организацию',\r\n        name: ['Ежемесячное пособие на ребенка', 'Пособие на детей не посещающих ДОУ', 'Ежемесячное пособие на ребенка 1,5-3 лет'],\r\n        voice_docs: ['Заявление', 'Информация о доходах семьи', 'Паспорт', 'Решение (копия) органа опеки и попечительства об установлении над ребенком опеки (попечительства)', 'Свидетельство о рождении ребенка', 'Свидетельство(копия) о рождении (усыновлении, смерти) предыдущих детей  ', 'Справка о составе семьи'],\r\n        print_docs: [\r\n            'Заявление', 'Информация о доходах семьи - ежегодно', 'Паспорт (или иной документ, удостоверяющий личность)', 'Решение (копия) органа опеки и попечительства об установлении над ребенком опеки (попечительства) копия вступившего в законную силу решения суда об усыновлении либо копия договора о передаче ребенка (детей) на воспитание в приемную семью', 'Свидетельство о рождении ребенка', 'Свидетельство(копия) о рождении (усыновлении, смерти) предыдущих детей  если ребенок не первый', 'Справка о составе семьи. Справку можно получить в паспортном столе ЖЭУ по месту прописки '\r\n\r\n        ],\r\n        to: 'ГКУ СО «ГУСЗН Самарского округа», районные подразделения',\r\n        comment:\r\n            'Прочие документы запрашиваются органами соцзащиты самостоятельно. Заявление можно заполнить по ссылке https://suprema63.ru/msdr/portal/social/privileges/questionnaire/show.do?qId=158170410&categoryId=4360109&pconditionId=4025863&groupId=121247'\r\n    },\r\n    {\r\n        id: 104,\r\n        full_name: 'Ежемесячная денежная выплата на ребенка в возрасте от трех до семи лет',\r\n        name: ['Ежемесячное пособие на ребенка', 'Пособие на ребенка в возрасте от трех до семи лет', 'Ежемесячное пособие на ребенка от 3 до 7', 'Пособие для детей от 3 до 7'],\r\n        voice_docs: ['Заявление', 'Документ о рождении ребенка (копия), в случае регистрации акта о рождении ребенка за пределами РФ ', 'Паспорт'],\r\n        print_docs: ['Заявление', 'Документ о рождении ребенка (копия), в случае регистрации акта о рождении ребенка за пределами РФ ', 'Паспорт (при обращении лично)'],\r\n        to: 'ГКУ СО «ГУСЗН Самарского округа», районные подразделения',\r\n        comment:\r\n            'Прочие документы запрашиваются органами соцзащиты самостоятельно. Заявление можно заполнить на портале госуслуг'\r\n    },\r\n    {\r\n        id: 105,\r\n        full_name: 'Ежемесячная выплата в связи с рождением (усыновлением) первого ребенка',\r\n        name: ['Ежемесячное пособие на второго ребенка', 'Ежемесячная выплата в связи с рождением (усыновлением) первого ребенка', 'Ежемесячное пособие на ребенка при рождении', 'Ежемесячная выплата гражданам,получившим сертификат на материнский капитал'],\r\n        voice_docs: ['Заявление', 'Документы, подтверждающие принадлежность к гражданству Российской Федерации заявителя и ребенка ', 'Документы, подтверждающие рождение (усыновление) ребенка', 'Документы, подтверждающие смерть женщины, объявление ее умершей, лишение ее родительских прав, отмену усыновления ', 'Реквизиты счета, открытого заявителем в кредитной организации ', 'Сведения о доходах членов семьи за 12 календарных месяцев, предшествующих месяцу подачи заявления ', 'Свидетельство о расторжении брака', 'Справка из военного комиссариата о призыве отца ребенка на военную службу и прохождение им военной службы по призыву выданная военным комиссариатом по месту его призыва'],\r\n        print_docs: ['Заявление', 'Документы, подтверждающие принадлежность к гражданству Российской Федерации заявителя и ребенка ', 'Документы, подтверждающие рождение (усыновление) ребенка', 'Документы, подтверждающие смерть женщины, объявление ее умершей, лишение ее родительских прав, отмену усыновления ', 'Реквизиты счета, открытого заявителем в кредитной организации ', 'Сведения о доходах членов семьи за 12 календарных месяцев, предшествующих месяцу подачи заявления ', 'Свидетельство о расторжении брака', 'Справка из военного комиссариата о призыве отца ребенка на военную службу и прохождение им военной службы по призыву выданная военным комиссариатом по месту его призыва'],\r\n        to: 'ГКУ СО «ГУСЗН Самарского округа», районные подразделения',\r\n        comment:\r\n            'Заявление можно заполнить по ссылке https://suprema63.ru/msdr/portal/social/privileges/questionnaire/show.do?qId=792188874&categoryId=792174839&pconditionId=792175144&groupId=121247'\r\n    }\r\n]","import { ColumnsType } from 'antd/lib/table'\r\nimport { ServicesModel } from '../Services.model'\r\nimport { renderServicesActions } from './Services.utils'\r\n\r\nexport const SERVICES_TABLE_COLUMNS: ColumnsType<ServicesModel> = [\r\n    {\r\n        title: 'Название',\r\n        dataIndex: 'full_name',\r\n        key: 'full_name',\r\n    },\r\n    {\r\n        title: '',\r\n        width: 100,\r\n        render: renderServicesActions,\r\n        align: 'right',\r\n    }\r\n]","import { ServicesModel } from '../Services.model'\r\nimport { PopupAdapter } from 'shared/popups'\r\nimport { IconsAdapter, ButtonsToolbar } from 'shared/components'\r\nimport React from 'react'\r\nimport { ROUTE_NAMES } from 'routing'\r\nimport { Button } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\n/**\r\n * Рендер кнопок управления для записи таблицы категорий\r\n * @param tableRow одна запись таблицы\r\n */\r\nexport const renderServicesActions = (tableRow: ServicesModel) => {\r\n    return (\r\n        <ButtonsToolbar>\r\n            <Link\r\n                to={`${ROUTE_NAMES.SERVICES_EDIT}/${tableRow.id}`}\r\n                className=\"like-button\"\r\n            >\r\n                <Button\r\n                    type=\"link\"\r\n                    icon={<IconsAdapter iconType=\"EditOutlined\" />}\r\n                />\r\n            </Link>\r\n            <PopupAdapter\r\n                formId=\"ConfirmDeleteForm\"\r\n                buttonText=\"\"\r\n                havePopup={false}\r\n                buttonOption={{\r\n                    type: 'link',\r\n                    icon: <IconsAdapter iconType=\"DeleteOutlined\"/>\r\n                }}\r\n                formOptions={{\r\n                    initialValues: tableRow\r\n                }}\r\n                modalOptions={{\r\n                    title: 'Подтвердите действие',\r\n                    okText: 'Да'\r\n                }}\r\n            />\r\n        </ButtonsToolbar>\r\n    )\r\n}","import React, { useCallback, useContext, useEffect, useState } from 'react'\r\nimport { ContentTitle, PageContent } from 'core/components'\r\nimport { LoaderContext } from 'core/context'\r\nimport { ButtonsToolbar } from 'shared/components'\r\nimport { PopupAdapter } from 'shared/popups'\r\nimport { Table, Button } from 'antd'\r\nimport { TABLE_EMPTY_MESSAGE } from 'shared/consts'\r\nimport { ConfirmDeleteForm } from 'shared/forms'\r\nimport { SERVICES_MOCK } from 'mocks'\r\nimport { ServicesModel } from '../Services.model'\r\nimport { Link } from 'react-router-dom'\r\nimport { ROUTE_NAMES } from 'routing'\r\nimport { SERVICES_TABLE_COLUMNS } from './Services.consts'\r\n\r\nexport const ServicesPage: React.FC = React.memo(() => {\r\n    const { setLoaderState } = useContext(LoaderContext)\r\n    const [dictionary, setDictionary] = useState<ServicesModel[]>([])\r\n\r\n    /**\r\n     * Запрос справочника\r\n     */\r\n    const dictionaryFetch = useCallback(async () => {\r\n        try {\r\n            setLoaderState(true)\r\n\r\n            console.log('Запрос за таблицей услуг для Алисы')\r\n            setDictionary(SERVICES_MOCK)\r\n        } catch (e) {\r\n            console.log(e)\r\n        } finally {\r\n            setLoaderState(false)\r\n        }\r\n    }, [setLoaderState])\r\n\r\n    /**\r\n     * Обработчик удаления записи\r\n     * @param id\r\n     */\r\n    const handleDelete = useCallback((id: number) => {\r\n        return console.log('Запись удалена! ID: ' + id)\r\n    }, [])\r\n\r\n    const handleRequestFinish = useCallback(\r\n        (popupHandler: () => void) => (err: any) => {\r\n            if (!err) {\r\n                popupHandler()\r\n                dictionaryFetch()\r\n            }\r\n        },\r\n        [dictionaryFetch]\r\n    )\r\n\r\n    useEffect(() => {\r\n        dictionaryFetch()\r\n    }, [dictionaryFetch])\r\n\r\n    return (\r\n        <PageContent>\r\n            <ContentTitle title=\"Услуги\" />\r\n\r\n            <ButtonsToolbar>\r\n                <Link\r\n                    to={ROUTE_NAMES.SERVICES_CREATE}\r\n                    className=\"like-button\"\r\n                >\r\n                    <Button>Создать</Button>\r\n                </Link>\r\n            </ButtonsToolbar>\r\n\r\n            <Table\r\n                rowKey=\"id\"\r\n                locale={{ emptyText: TABLE_EMPTY_MESSAGE }}\r\n                columns={SERVICES_TABLE_COLUMNS}\r\n                dataSource={dictionary}\r\n                pagination={false}\r\n            />\r\n\r\n            <PopupAdapter\r\n                component={ConfirmDeleteForm}\r\n                formId=\"ConfirmDeleteForm\"\r\n                onRequestFinish={handleRequestFinish}\r\n                haveButton={false}\r\n                deleteFormAction={handleDelete}\r\n            />\r\n        </PageContent>\r\n    )\r\n})","import './ServicesForm.sass'\r\n\r\nimport React, { useCallback, useContext, useEffect, useState } from 'react'\r\nimport { ContentTitle, PageContent } from 'core/components'\r\nimport { Button, Col, Form, Row } from 'antd'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { LoaderContext } from 'core/context'\r\nimport { SERVICES_MOCK } from 'mocks'\r\nimport { ServicesModel, ServicesUrlParamsModel } from '../Services.model'\r\nimport { InputControl, ButtonsToolbar, TextAreaControl, CloneControl } from 'shared/components'\r\nimport { COL_RESPONSIVE_FULL, COL_RESPONSIVE_HALF, LABEL_COL_FULL, ROW_GUTTER } from 'shared/consts'\r\nimport { ROUTE_NAMES } from 'routing'\r\n\r\nexport const ServicesForm: React.FC = React.memo(() => {\r\n    const { setLoaderState } = useContext(LoaderContext)\r\n    const [form] = Form.useForm()\r\n    const urlParams = useParams<ServicesUrlParamsModel>()\r\n\r\n    /** Начальные значения для формы создания мероприятия в режиме редактирования */\r\n    const [initialValuesForEdit, setInitialValuesForEdit] = useState<ServicesModel>()\r\n\r\n    /**\r\n     * Отправка формы на сервер\r\n     * @param values значения формы\r\n     */\r\n    const handleFinish = useCallback(\r\n        async (values) => {\r\n            try {\r\n                setLoaderState(true)\r\n\r\n                console.log(values)\r\n\r\n                if (!initialValuesForEdit) {\r\n                    form.resetFields()\r\n                }\r\n            } catch (err) {\r\n                console.log(err)\r\n            } finally {\r\n                setLoaderState(false)\r\n            }\r\n        },\r\n        [form, initialValuesForEdit, setLoaderState]\r\n    )\r\n\r\n    /**\r\n     * Запрос справочника\r\n     */\r\n    const fetchServiceForEdit = useCallback(async () => {\r\n        try {\r\n            setLoaderState(true)\r\n\r\n            console.log('Запрос за услугами')\r\n\r\n            setInitialValuesForEdit(SERVICES_MOCK.find(el => el.id === Number(urlParams.id)))\r\n\r\n        } catch (err) {\r\n            console.error(err)\r\n        } finally {\r\n            setLoaderState(false)\r\n        }\r\n    }, [urlParams.id, setLoaderState])\r\n\r\n    useEffect(() => {\r\n        if (urlParams.id) fetchServiceForEdit()\r\n    }, [urlParams.id, fetchServiceForEdit])\r\n\r\n    useEffect(() => {\r\n        if (initialValuesForEdit) form.resetFields()\r\n    }, [initialValuesForEdit, form])\r\n\r\n    return (\r\n        <PageContent className=\"services-form\">\r\n            <ContentTitle\r\n                title={\r\n                    urlParams.id\r\n                        ? 'Редактирование услуги'\r\n                        : 'Создание услуги'\r\n                }\r\n                className=\"services-form__header\"\r\n            >\r\n                <ButtonsToolbar>\r\n                    <Button\r\n                        htmlType=\"submit\"\r\n                        type=\"primary\"\r\n                        form=\"servicesFrom\"\r\n\r\n                    >\r\n                        {urlParams.id ? 'Изменить' : 'Создать'}\r\n                    </Button>\r\n                    <Link\r\n                        to={ROUTE_NAMES.SERVICES}\r\n                        className=\"like-button\"\r\n                    >\r\n                        <Button>Отмена</Button>\r\n                    </Link>\r\n                </ButtonsToolbar>\r\n            </ContentTitle>\r\n\r\n            <Form\r\n                id=\"servicesFrom\"\r\n                form={form}\r\n                onFinish={handleFinish}\r\n                initialValues={initialValuesForEdit}\r\n            >\r\n                <Row gutter={ROW_GUTTER}>\r\n                    <Col xs={COL_RESPONSIVE_FULL} lg={COL_RESPONSIVE_HALF}>\r\n                        <Form.Item\r\n                            name=\"full_name\"\r\n                            label=\"Название услуги\"\r\n                            labelCol={LABEL_COL_FULL}\r\n                            labelAlign=\"left\"\r\n                        >\r\n                            <InputControl/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"print_docs\"\r\n                            label=\"Перечень документов\"\r\n                            labelCol={LABEL_COL_FULL}\r\n                            labelAlign=\"left\"\r\n                        >\r\n                            <CloneControl name='print_docs' component={InputControl}/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"name\"\r\n                            label=\"Фразы для поиска\"\r\n                            labelCol={LABEL_COL_FULL}\r\n                            labelAlign=\"left\"\r\n                        >\r\n                            <CloneControl name='name' component={InputControl}/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"voice_docs\"\r\n                            label=\"Фразы Алисы\"\r\n                            labelCol={LABEL_COL_FULL}\r\n                            labelAlign=\"left\"\r\n                        >\r\n                            <CloneControl name='voice_docs' component={InputControl}/>\r\n                        </Form.Item>\r\n                    </Col>\r\n\r\n                    <Col xs={COL_RESPONSIVE_FULL} lg={COL_RESPONSIVE_HALF}>\r\n                        <Form.Item\r\n                            name=\"to\"\r\n                            label=\"Место подачи документов\"\r\n                            labelCol={LABEL_COL_FULL}\r\n                            labelAlign=\"left\"\r\n                        >\r\n                            <InputControl/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"comment\"\r\n                            label=\"Комментарии\"\r\n                            labelCol={LABEL_COL_FULL}\r\n                            labelAlign=\"left\"\r\n                        >\r\n                            <TextAreaControl autoSize={{ minRows: 7, maxRows: 15 }}/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </PageContent>\r\n    )\r\n})","import React from 'react'\r\nimport { NotFoundPage } from 'pages'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport { ROUTE_NAMES } from 'routing'\r\nimport { ServicesPage, ServicesForm } from './components'\r\n\r\nexport const Services: React.FC = React.memo(() => {\r\n    return (\r\n        <Switch>\r\n            {/* Таблица услуг: создание услуги */}\r\n            <Route path={ROUTE_NAMES.SERVICES_CREATE}>\r\n                <ServicesForm />\r\n            </Route>\r\n\r\n            {/* Таблица услуг: редактирование услуги */}\r\n            <Route path={`${ROUTE_NAMES.SERVICES_EDIT}/:id`}>\r\n                <ServicesForm />\r\n            </Route>\r\n\r\n            {/* Таблица услуг */}\r\n            <Route path={ROUTE_NAMES.SERVICES}>\r\n                <ServicesPage />\r\n            </Route>\r\n\r\n            {/* Ловушка неизвестных роутов */}\r\n            <Route component={NotFoundPage} />\r\n        </Switch>\r\n    )\r\n})","import './Routing.scss'\n\nimport React, { FC, useContext, useMemo } from 'react'\nimport { NotFoundPage, Services } from 'pages'\nimport { LoaderContext } from 'core/context'\n\nimport { ROUTE_NAMES } from './routeNames.const'\nimport { Route, Switch, Redirect } from 'react-router-dom'\n\nexport const Routing: FC = React.memo(() => {\n    const { loaderState } = useContext(LoaderContext)\n\n    const contentStyles = useMemo(() => {\n        if (!loaderState) {\n            return 'content scroll'\n        }\n\n        return 'content scroll with-loader'\n    }, [loaderState])\n\n    return (\n        <div className={contentStyles}>\n\n            <Switch>\n                {/* Главная страница */}\n                <Route path={ROUTE_NAMES.MAIN} exact>\n                    <Redirect to={ROUTE_NAMES.SERVICES}/>\n                </Route>\n\n                {/* Главная страница */}\n                <Route path={ROUTE_NAMES.SERVICES}>\n                    <Services/>\n                </Route>\n\n                {/* Ловушка неизвестных роутов */}\n                <Route component={NotFoundPage}/>\n            </Switch>\n        </div>\n    )\n})\n","import React from 'react'\n\n/** Импорт форм для адаптера */\n// import { CompetenciesGroupForm } from 'shared/forms'\n\n/** Импорт адаптера */\n// import { PopupAdapter } from '.'\n\nexport const Popups: React.FC = React.memo(() => {\n    return <>{/** Модальные окна общего назначения */}</>\n})\n","import React, { useCallback } from 'react'\nimport { Button, Form, Row } from 'antd'\nimport { CheckboxControl, IconsAdapter, InputControl, InputPasswordControl } from 'shared/components'\nimport './AuthModal.sass'\nimport { PopupAdapterFormProps } from '../PopupAdapter.model'\n\nexport const AuthModal: React.FC<PopupAdapterFormProps> = React.memo((props) => {\n       const { onRequestFinish } = props\n\n    const handleFinish = useCallback(\n        (values) => {\n            onRequestFinish!(values)\n\n        },\n        [onRequestFinish])\n\n        return (\n            <div className={'auth-modal'}>\n                <h3 className={'auth-modal__title'}>ВХОД В АККАУНТ</h3>\n\n                <Form\n                    id={'auth'}\n                    initialValues={{ login: 'admin', password: 'admin' }}\n                    size={'large'}\n                    onFinish={handleFinish}\n                >\n                    <Form.Item\n                        name={'login'}>\n                        <InputControl placeholder={'Логин'} prefix={<IconsAdapter iconType={'UserOutlined'}/>}/>\n                    </Form.Item>\n                    <Form.Item name={'password'}>\n                        <InputPasswordControl placeholder={'Логин'} prefix={<IconsAdapter iconType={'LockOutlined'}/>}/>\n                    </Form.Item>\n                    <Row style={{justifyContent: 'space-between'}}>\n                        <Form.Item name={'rememberMe'}\n                        valuePropName={\"checked\"}>\n                            <CheckboxControl>Запомнить меня</CheckboxControl>\n                        </Form.Item>\n                        <Button type={'link'}>Забыл пароль</Button>\n                    </Row>\n\n                    <Button type={'primary'} htmlType={'submit'} className={'submit-btn'}>ВОЙТИ</Button>\n                </Form>\n\n            </div>\n        )\n    }\n)\n","import React, { useCallback, useContext } from 'react'\nimport { Button, Modal } from 'antd'\nimport { LoaderContext, ModalsContext, ModalsOptionsProps } from 'core/context'\n\nimport { PopupAdapterProps } from './PopupAdapter.model'\n\nexport const PopupAdapter: React.FC<PopupAdapterProps> = React.memo(\n    ({\n        component: Component,\n        buttonText = 'Добавить',\n        formId,\n        modalOptions,\n        formOptions,\n        buttonOption,\n        havePopup = true,\n        haveButton = true,\n        recordCopy,\n        onRequestFinish,\n        deleteFormAction,\n        rowSelectionType,\n    }) => {\n        const { loaderState } = useContext(LoaderContext)\n        const { popupAdapterOptions, setPopupAdapterOptions } = useContext(\n            ModalsContext\n        )\n\n        const getRestPopupAdapterOptions = useCallback(\n            (prevState: ModalsOptionsProps) => ({\n                recordCopy,\n                formOptions: {\n                    ...prevState[formId]?.formOptions,\n                    initialValues: formOptions?.initialValues,\n                },\n                modalOptions: {\n                    ...prevState[formId]?.modalOptions,\n                    ...modalOptions,\n                    title: modalOptions?.title || 'Добавить запись',\n                    okText: modalOptions?.okText || 'Отправить',\n                },\n            }),\n            [formId, formOptions, modalOptions, recordCopy]\n        )\n\n        const closeModal = useCallback(\n            () =>\n                setPopupAdapterOptions((prevState) => ({\n                    ...prevState,\n                    [formId]: {\n                        ...prevState[formId],\n                        visible: false,\n                    },\n                })),\n            [formId, setPopupAdapterOptions]\n        )\n\n        const showModal = useCallback(\n            () =>\n                setPopupAdapterOptions((prevState: ModalsOptionsProps) => ({\n                    ...prevState,\n                    [formId]: {\n                        ...prevState[formId],\n                        visible: true,\n                        ...getRestPopupAdapterOptions(prevState),\n                    },\n                })),\n            [formId, getRestPopupAdapterOptions, setPopupAdapterOptions]\n        )\n\n        /**\n         * Обработчик успешной отправки формы\n         */\n        const handleRequestFinish = useCallback(() => {\n            if (onRequestFinish) return onRequestFinish(closeModal)\n        }, [closeModal, onRequestFinish])\n\n        const handleCancel = useCallback(() => {\n            closeModal()\n        }, [closeModal])\n\n        return (\n            <>\n                {haveButton && (\n                    <Button {...buttonOption} onClick={showModal}>\n                        {buttonText}\n                    </Button>\n                )}\n\n                {havePopup && Component && (\n                    <Modal\n                        okButtonProps={{\n                            htmlType: 'submit',\n                            form: formId,\n                            disabled: loaderState,\n                        }}\n                        onCancel={handleCancel}\n                        destroyOnClose\n                        visible={popupAdapterOptions[formId]?.visible}\n                        {...popupAdapterOptions[formId]?.modalOptions}\n                    >\n                        <Component\n                            onRequestFinish={handleRequestFinish()}\n                            deleteFormAction={deleteFormAction}\n                            id={formId}\n                            {...formOptions}\n                            recordCopy={popupAdapterOptions[formId]?.recordCopy}\n                            initialValues={\n                                popupAdapterOptions[formId]?.formOptions\n                                    ?.initialValues\n                            }\n                            rowSelectionType={rowSelectionType}\n                            onCancelSubmit={handleCancel}\n                        />\n                    </Modal>\n                )}\n            </>\n        )\n    }\n)\n"],"sourceRoot":""}